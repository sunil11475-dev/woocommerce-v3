<?php
/**
 * SystemStatusTheme
 *
 * PHP version 5
 *
 * @category Class
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * wc/v3
 *
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WooCommerce\Client\Model;

use \ArrayAccess;
use \WooCommerce\Client\ObjectSerializer;

/**
 * SystemStatusTheme Class Doc Comment
 *
 * @category Class
 * @description Theme.
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SystemStatusTheme implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'system_status_theme';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'version' => 'string',
'version_latest' => 'string',
'author_url' => 'string',
'is_child_theme' => 'bool',
'has_woocommerce_support' => 'bool',
'has_woocommerce_file' => 'bool',
'has_outdated_templates' => 'bool',
'overrides' => 'string[]',
'parent_name' => 'string',
'parent_version' => 'string',
'parent_author_url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'version' => null,
'version_latest' => null,
'author_url' => 'uri',
'is_child_theme' => null,
'has_woocommerce_support' => null,
'has_woocommerce_file' => null,
'has_outdated_templates' => null,
'overrides' => null,
'parent_name' => null,
'parent_version' => null,
'parent_author_url' => 'uri'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'version' => 'version',
'version_latest' => 'version_latest',
'author_url' => 'author_url',
'is_child_theme' => 'is_child_theme',
'has_woocommerce_support' => 'has_woocommerce_support',
'has_woocommerce_file' => 'has_woocommerce_file',
'has_outdated_templates' => 'has_outdated_templates',
'overrides' => 'overrides',
'parent_name' => 'parent_name',
'parent_version' => 'parent_version',
'parent_author_url' => 'parent_author_url'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'version' => 'setVersion',
'version_latest' => 'setVersionLatest',
'author_url' => 'setAuthorUrl',
'is_child_theme' => 'setIsChildTheme',
'has_woocommerce_support' => 'setHasWoocommerceSupport',
'has_woocommerce_file' => 'setHasWoocommerceFile',
'has_outdated_templates' => 'setHasOutdatedTemplates',
'overrides' => 'setOverrides',
'parent_name' => 'setParentName',
'parent_version' => 'setParentVersion',
'parent_author_url' => 'setParentAuthorUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'version' => 'getVersion',
'version_latest' => 'getVersionLatest',
'author_url' => 'getAuthorUrl',
'is_child_theme' => 'getIsChildTheme',
'has_woocommerce_support' => 'getHasWoocommerceSupport',
'has_woocommerce_file' => 'getHasWoocommerceFile',
'has_outdated_templates' => 'getHasOutdatedTemplates',
'overrides' => 'getOverrides',
'parent_name' => 'getParentName',
'parent_version' => 'getParentVersion',
'parent_author_url' => 'getParentAuthorUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['version_latest'] = isset($data['version_latest']) ? $data['version_latest'] : null;
        $this->container['author_url'] = isset($data['author_url']) ? $data['author_url'] : null;
        $this->container['is_child_theme'] = isset($data['is_child_theme']) ? $data['is_child_theme'] : null;
        $this->container['has_woocommerce_support'] = isset($data['has_woocommerce_support']) ? $data['has_woocommerce_support'] : null;
        $this->container['has_woocommerce_file'] = isset($data['has_woocommerce_file']) ? $data['has_woocommerce_file'] : null;
        $this->container['has_outdated_templates'] = isset($data['has_outdated_templates']) ? $data['has_outdated_templates'] : null;
        $this->container['overrides'] = isset($data['overrides']) ? $data['overrides'] : null;
        $this->container['parent_name'] = isset($data['parent_name']) ? $data['parent_name'] : null;
        $this->container['parent_version'] = isset($data['parent_version']) ? $data['parent_version'] : null;
        $this->container['parent_author_url'] = isset($data['parent_author_url']) ? $data['parent_author_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Theme name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Theme version.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets version_latest
     *
     * @return string
     */
    public function getVersionLatest()
    {
        return $this->container['version_latest'];
    }

    /**
     * Sets version_latest
     *
     * @param string $version_latest Latest version of theme.
     *
     * @return $this
     */
    public function setVersionLatest($version_latest)
    {
        $this->container['version_latest'] = $version_latest;

        return $this;
    }

    /**
     * Gets author_url
     *
     * @return string
     */
    public function getAuthorUrl()
    {
        return $this->container['author_url'];
    }

    /**
     * Sets author_url
     *
     * @param string $author_url Theme author URL.
     *
     * @return $this
     */
    public function setAuthorUrl($author_url)
    {
        $this->container['author_url'] = $author_url;

        return $this;
    }

    /**
     * Gets is_child_theme
     *
     * @return bool
     */
    public function getIsChildTheme()
    {
        return $this->container['is_child_theme'];
    }

    /**
     * Sets is_child_theme
     *
     * @param bool $is_child_theme Is this theme a child theme?
     *
     * @return $this
     */
    public function setIsChildTheme($is_child_theme)
    {
        $this->container['is_child_theme'] = $is_child_theme;

        return $this;
    }

    /**
     * Gets has_woocommerce_support
     *
     * @return bool
     */
    public function getHasWoocommerceSupport()
    {
        return $this->container['has_woocommerce_support'];
    }

    /**
     * Sets has_woocommerce_support
     *
     * @param bool $has_woocommerce_support Does the theme declare WooCommerce support?
     *
     * @return $this
     */
    public function setHasWoocommerceSupport($has_woocommerce_support)
    {
        $this->container['has_woocommerce_support'] = $has_woocommerce_support;

        return $this;
    }

    /**
     * Gets has_woocommerce_file
     *
     * @return bool
     */
    public function getHasWoocommerceFile()
    {
        return $this->container['has_woocommerce_file'];
    }

    /**
     * Sets has_woocommerce_file
     *
     * @param bool $has_woocommerce_file Does the theme have a woocommerce.php file?
     *
     * @return $this
     */
    public function setHasWoocommerceFile($has_woocommerce_file)
    {
        $this->container['has_woocommerce_file'] = $has_woocommerce_file;

        return $this;
    }

    /**
     * Gets has_outdated_templates
     *
     * @return bool
     */
    public function getHasOutdatedTemplates()
    {
        return $this->container['has_outdated_templates'];
    }

    /**
     * Sets has_outdated_templates
     *
     * @param bool $has_outdated_templates Does this theme have outdated templates?
     *
     * @return $this
     */
    public function setHasOutdatedTemplates($has_outdated_templates)
    {
        $this->container['has_outdated_templates'] = $has_outdated_templates;

        return $this;
    }

    /**
     * Gets overrides
     *
     * @return string[]
     */
    public function getOverrides()
    {
        return $this->container['overrides'];
    }

    /**
     * Sets overrides
     *
     * @param string[] $overrides Template overrides.
     *
     * @return $this
     */
    public function setOverrides($overrides)
    {
        $this->container['overrides'] = $overrides;

        return $this;
    }

    /**
     * Gets parent_name
     *
     * @return string
     */
    public function getParentName()
    {
        return $this->container['parent_name'];
    }

    /**
     * Sets parent_name
     *
     * @param string $parent_name Parent theme name.
     *
     * @return $this
     */
    public function setParentName($parent_name)
    {
        $this->container['parent_name'] = $parent_name;

        return $this;
    }

    /**
     * Gets parent_version
     *
     * @return string
     */
    public function getParentVersion()
    {
        return $this->container['parent_version'];
    }

    /**
     * Sets parent_version
     *
     * @param string $parent_version Parent theme version.
     *
     * @return $this
     */
    public function setParentVersion($parent_version)
    {
        $this->container['parent_version'] = $parent_version;

        return $this;
    }

    /**
     * Gets parent_author_url
     *
     * @return string
     */
    public function getParentAuthorUrl()
    {
        return $this->container['parent_author_url'];
    }

    /**
     * Sets parent_author_url
     *
     * @param string $parent_author_url Parent theme author URL.
     *
     * @return $this
     */
    public function setParentAuthorUrl($parent_author_url)
    {
        $this->container['parent_author_url'] = $parent_author_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
