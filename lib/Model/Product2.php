<?php
/**
 * Product2
 *
 * PHP version 5
 *
 * @category Class
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * wc/v3
 *
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WooCommerce\Client\Model;

use \ArrayAccess;
use \WooCommerce\Client\ObjectSerializer;

/**
 * Product2 Class Doc Comment
 *
 * @category Class
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'product_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'slug' => 'string',
'date_created' => 'string',
'date_created_gmt' => 'string',
'type' => 'string',
'status' => 'string',
'featured' => 'bool',
'catalog_visibility' => 'string',
'description' => 'string',
'short_description' => 'string',
'sku' => 'string',
'regular_price' => 'string',
'sale_price' => 'string',
'date_on_sale_from' => 'string',
'date_on_sale_from_gmt' => 'string',
'date_on_sale_to' => 'string',
'date_on_sale_to_gmt' => 'string',
'virtual' => 'bool',
'downloadable' => 'bool',
'downloads' => '\WooCommerce\Client\Model\ProductsDownloads[]',
'download_limit' => 'int',
'download_expiry' => 'int',
'external_url' => 'string',
'button_text' => 'string',
'tax_status' => 'string',
'tax_class' => 'string',
'manage_stock' => 'bool',
'stock_quantity' => 'int',
'stock_status' => 'string',
'backorders' => 'string',
'low_stock_amount' => 'int',
'sold_individually' => 'bool',
'weight' => 'string',
'dimensions' => '\WooCommerce\Client\Model\ProductsDimensions',
'shipping_class' => 'string',
'reviews_allowed' => 'bool',
'upsell_ids' => 'int[]',
'cross_sell_ids' => 'int[]',
'parent_id' => 'int',
'purchase_note' => 'string',
'categories' => '\WooCommerce\Client\Model\ProductsCategories[]',
'tags' => '\WooCommerce\Client\Model\ProductsTags[]',
'images' => '\WooCommerce\Client\Model\ProductsImages[]',
'attributes' => '\WooCommerce\Client\Model\ProductsAttributes[]',
'default_attributes' => '\WooCommerce\Client\Model\ProductsDefaultAttributes[]',
'menu_order' => 'int',
'meta_data' => '\WooCommerce\Client\Model\CouponsMetaData[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'slug' => null,
'date_created' => null,
'date_created_gmt' => null,
'type' => null,
'status' => null,
'featured' => null,
'catalog_visibility' => null,
'description' => null,
'short_description' => null,
'sku' => null,
'regular_price' => null,
'sale_price' => null,
'date_on_sale_from' => null,
'date_on_sale_from_gmt' => null,
'date_on_sale_to' => null,
'date_on_sale_to_gmt' => null,
'virtual' => null,
'downloadable' => null,
'downloads' => null,
'download_limit' => null,
'download_expiry' => null,
'external_url' => 'uri',
'button_text' => null,
'tax_status' => null,
'tax_class' => null,
'manage_stock' => null,
'stock_quantity' => null,
'stock_status' => null,
'backorders' => null,
'low_stock_amount' => null,
'sold_individually' => null,
'weight' => null,
'dimensions' => null,
'shipping_class' => null,
'reviews_allowed' => null,
'upsell_ids' => null,
'cross_sell_ids' => null,
'parent_id' => null,
'purchase_note' => null,
'categories' => null,
'tags' => null,
'images' => null,
'attributes' => null,
'default_attributes' => null,
'menu_order' => null,
'meta_data' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'slug' => 'slug',
'date_created' => 'date_created',
'date_created_gmt' => 'date_created_gmt',
'type' => 'type',
'status' => 'status',
'featured' => 'featured',
'catalog_visibility' => 'catalog_visibility',
'description' => 'description',
'short_description' => 'short_description',
'sku' => 'sku',
'regular_price' => 'regular_price',
'sale_price' => 'sale_price',
'date_on_sale_from' => 'date_on_sale_from',
'date_on_sale_from_gmt' => 'date_on_sale_from_gmt',
'date_on_sale_to' => 'date_on_sale_to',
'date_on_sale_to_gmt' => 'date_on_sale_to_gmt',
'virtual' => 'virtual',
'downloadable' => 'downloadable',
'downloads' => 'downloads',
'download_limit' => 'download_limit',
'download_expiry' => 'download_expiry',
'external_url' => 'external_url',
'button_text' => 'button_text',
'tax_status' => 'tax_status',
'tax_class' => 'tax_class',
'manage_stock' => 'manage_stock',
'stock_quantity' => 'stock_quantity',
'stock_status' => 'stock_status',
'backorders' => 'backorders',
'low_stock_amount' => 'low_stock_amount',
'sold_individually' => 'sold_individually',
'weight' => 'weight',
'dimensions' => 'dimensions',
'shipping_class' => 'shipping_class',
'reviews_allowed' => 'reviews_allowed',
'upsell_ids' => 'upsell_ids',
'cross_sell_ids' => 'cross_sell_ids',
'parent_id' => 'parent_id',
'purchase_note' => 'purchase_note',
'categories' => 'categories',
'tags' => 'tags',
'images' => 'images',
'attributes' => 'attributes',
'default_attributes' => 'default_attributes',
'menu_order' => 'menu_order',
'meta_data' => 'meta_data'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'slug' => 'setSlug',
'date_created' => 'setDateCreated',
'date_created_gmt' => 'setDateCreatedGmt',
'type' => 'setType',
'status' => 'setStatus',
'featured' => 'setFeatured',
'catalog_visibility' => 'setCatalogVisibility',
'description' => 'setDescription',
'short_description' => 'setShortDescription',
'sku' => 'setSku',
'regular_price' => 'setRegularPrice',
'sale_price' => 'setSalePrice',
'date_on_sale_from' => 'setDateOnSaleFrom',
'date_on_sale_from_gmt' => 'setDateOnSaleFromGmt',
'date_on_sale_to' => 'setDateOnSaleTo',
'date_on_sale_to_gmt' => 'setDateOnSaleToGmt',
'virtual' => 'setVirtual',
'downloadable' => 'setDownloadable',
'downloads' => 'setDownloads',
'download_limit' => 'setDownloadLimit',
'download_expiry' => 'setDownloadExpiry',
'external_url' => 'setExternalUrl',
'button_text' => 'setButtonText',
'tax_status' => 'setTaxStatus',
'tax_class' => 'setTaxClass',
'manage_stock' => 'setManageStock',
'stock_quantity' => 'setStockQuantity',
'stock_status' => 'setStockStatus',
'backorders' => 'setBackorders',
'low_stock_amount' => 'setLowStockAmount',
'sold_individually' => 'setSoldIndividually',
'weight' => 'setWeight',
'dimensions' => 'setDimensions',
'shipping_class' => 'setShippingClass',
'reviews_allowed' => 'setReviewsAllowed',
'upsell_ids' => 'setUpsellIds',
'cross_sell_ids' => 'setCrossSellIds',
'parent_id' => 'setParentId',
'purchase_note' => 'setPurchaseNote',
'categories' => 'setCategories',
'tags' => 'setTags',
'images' => 'setImages',
'attributes' => 'setAttributes',
'default_attributes' => 'setDefaultAttributes',
'menu_order' => 'setMenuOrder',
'meta_data' => 'setMetaData'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'slug' => 'getSlug',
'date_created' => 'getDateCreated',
'date_created_gmt' => 'getDateCreatedGmt',
'type' => 'getType',
'status' => 'getStatus',
'featured' => 'getFeatured',
'catalog_visibility' => 'getCatalogVisibility',
'description' => 'getDescription',
'short_description' => 'getShortDescription',
'sku' => 'getSku',
'regular_price' => 'getRegularPrice',
'sale_price' => 'getSalePrice',
'date_on_sale_from' => 'getDateOnSaleFrom',
'date_on_sale_from_gmt' => 'getDateOnSaleFromGmt',
'date_on_sale_to' => 'getDateOnSaleTo',
'date_on_sale_to_gmt' => 'getDateOnSaleToGmt',
'virtual' => 'getVirtual',
'downloadable' => 'getDownloadable',
'downloads' => 'getDownloads',
'download_limit' => 'getDownloadLimit',
'download_expiry' => 'getDownloadExpiry',
'external_url' => 'getExternalUrl',
'button_text' => 'getButtonText',
'tax_status' => 'getTaxStatus',
'tax_class' => 'getTaxClass',
'manage_stock' => 'getManageStock',
'stock_quantity' => 'getStockQuantity',
'stock_status' => 'getStockStatus',
'backorders' => 'getBackorders',
'low_stock_amount' => 'getLowStockAmount',
'sold_individually' => 'getSoldIndividually',
'weight' => 'getWeight',
'dimensions' => 'getDimensions',
'shipping_class' => 'getShippingClass',
'reviews_allowed' => 'getReviewsAllowed',
'upsell_ids' => 'getUpsellIds',
'cross_sell_ids' => 'getCrossSellIds',
'parent_id' => 'getParentId',
'purchase_note' => 'getPurchaseNote',
'categories' => 'getCategories',
'tags' => 'getTags',
'images' => 'getImages',
'attributes' => 'getAttributes',
'default_attributes' => 'getDefaultAttributes',
'menu_order' => 'getMenuOrder',
'meta_data' => 'getMetaData'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_SIMPLE = 'simple';
const TYPE_GROUPED = 'grouped';
const TYPE_EXTERNAL = 'external';
const TYPE_VARIABLE = 'variable';
const STATUS_DRAFT = 'draft';
const STATUS_PENDING = 'pending';
const STATUS__PRIVATE = 'private';
const STATUS_PUBLISH = 'publish';
const STATUS_FUTURE = 'future';
const CATALOG_VISIBILITY_VISIBLE = 'visible';
const CATALOG_VISIBILITY_CATALOG = 'catalog';
const CATALOG_VISIBILITY_SEARCH = 'search';
const CATALOG_VISIBILITY_HIDDEN = 'hidden';
const TAX_STATUS_TAXABLE = 'taxable';
const TAX_STATUS_SHIPPING = 'shipping';
const TAX_STATUS_NONE = 'none';
const STOCK_STATUS_INSTOCK = 'instock';
const STOCK_STATUS_OUTOFSTOCK = 'outofstock';
const STOCK_STATUS_ONBACKORDER = 'onbackorder';
const BACKORDERS_NO = 'no';
const BACKORDERS_NOTIFY = 'notify';
const BACKORDERS_YES = 'yes';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SIMPLE,
self::TYPE_GROUPED,
self::TYPE_EXTERNAL,
self::TYPE_VARIABLE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
self::STATUS_PENDING,
self::STATUS__PRIVATE,
self::STATUS_PUBLISH,
self::STATUS_FUTURE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCatalogVisibilityAllowableValues()
    {
        return [
            self::CATALOG_VISIBILITY_VISIBLE,
self::CATALOG_VISIBILITY_CATALOG,
self::CATALOG_VISIBILITY_SEARCH,
self::CATALOG_VISIBILITY_HIDDEN,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxStatusAllowableValues()
    {
        return [
            self::TAX_STATUS_TAXABLE,
self::TAX_STATUS_SHIPPING,
self::TAX_STATUS_NONE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStockStatusAllowableValues()
    {
        return [
            self::STOCK_STATUS_INSTOCK,
self::STOCK_STATUS_OUTOFSTOCK,
self::STOCK_STATUS_ONBACKORDER,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBackordersAllowableValues()
    {
        return [
            self::BACKORDERS_NO,
self::BACKORDERS_NOTIFY,
self::BACKORDERS_YES,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_created_gmt'] = isset($data['date_created_gmt']) ? $data['date_created_gmt'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['featured'] = isset($data['featured']) ? $data['featured'] : null;
        $this->container['catalog_visibility'] = isset($data['catalog_visibility']) ? $data['catalog_visibility'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['regular_price'] = isset($data['regular_price']) ? $data['regular_price'] : null;
        $this->container['sale_price'] = isset($data['sale_price']) ? $data['sale_price'] : null;
        $this->container['date_on_sale_from'] = isset($data['date_on_sale_from']) ? $data['date_on_sale_from'] : null;
        $this->container['date_on_sale_from_gmt'] = isset($data['date_on_sale_from_gmt']) ? $data['date_on_sale_from_gmt'] : null;
        $this->container['date_on_sale_to'] = isset($data['date_on_sale_to']) ? $data['date_on_sale_to'] : null;
        $this->container['date_on_sale_to_gmt'] = isset($data['date_on_sale_to_gmt']) ? $data['date_on_sale_to_gmt'] : null;
        $this->container['virtual'] = isset($data['virtual']) ? $data['virtual'] : null;
        $this->container['downloadable'] = isset($data['downloadable']) ? $data['downloadable'] : null;
        $this->container['downloads'] = isset($data['downloads']) ? $data['downloads'] : null;
        $this->container['download_limit'] = isset($data['download_limit']) ? $data['download_limit'] : null;
        $this->container['download_expiry'] = isset($data['download_expiry']) ? $data['download_expiry'] : null;
        $this->container['external_url'] = isset($data['external_url']) ? $data['external_url'] : null;
        $this->container['button_text'] = isset($data['button_text']) ? $data['button_text'] : null;
        $this->container['tax_status'] = isset($data['tax_status']) ? $data['tax_status'] : null;
        $this->container['tax_class'] = isset($data['tax_class']) ? $data['tax_class'] : null;
        $this->container['manage_stock'] = isset($data['manage_stock']) ? $data['manage_stock'] : null;
        $this->container['stock_quantity'] = isset($data['stock_quantity']) ? $data['stock_quantity'] : null;
        $this->container['stock_status'] = isset($data['stock_status']) ? $data['stock_status'] : null;
        $this->container['backorders'] = isset($data['backorders']) ? $data['backorders'] : null;
        $this->container['low_stock_amount'] = isset($data['low_stock_amount']) ? $data['low_stock_amount'] : null;
        $this->container['sold_individually'] = isset($data['sold_individually']) ? $data['sold_individually'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['shipping_class'] = isset($data['shipping_class']) ? $data['shipping_class'] : null;
        $this->container['reviews_allowed'] = isset($data['reviews_allowed']) ? $data['reviews_allowed'] : null;
        $this->container['upsell_ids'] = isset($data['upsell_ids']) ? $data['upsell_ids'] : null;
        $this->container['cross_sell_ids'] = isset($data['cross_sell_ids']) ? $data['cross_sell_ids'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['purchase_note'] = isset($data['purchase_note']) ? $data['purchase_note'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['default_attributes'] = isset($data['default_attributes']) ? $data['default_attributes'] : null;
        $this->container['menu_order'] = isset($data['menu_order']) ? $data['menu_order'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCatalogVisibilityAllowableValues();
        if (!is_null($this->container['catalog_visibility']) && !in_array($this->container['catalog_visibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'catalog_visibility', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxStatusAllowableValues();
        if (!is_null($this->container['tax_status']) && !in_array($this->container['tax_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStockStatusAllowableValues();
        if (!is_null($this->container['stock_status']) && !in_array($this->container['stock_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'stock_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBackordersAllowableValues();
        if (!is_null($this->container['backorders']) && !in_array($this->container['backorders'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'backorders', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Product name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug Product slug.
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created The date the product was created, in the site's timezone.
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_created_gmt
     *
     * @return string
     */
    public function getDateCreatedGmt()
    {
        return $this->container['date_created_gmt'];
    }

    /**
     * Sets date_created_gmt
     *
     * @param string $date_created_gmt The date the product was created, as GMT.
     *
     * @return $this
     */
    public function setDateCreatedGmt($date_created_gmt)
    {
        $this->container['date_created_gmt'] = $date_created_gmt;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Product type.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Product status (post status).
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets featured
     *
     * @return bool
     */
    public function getFeatured()
    {
        return $this->container['featured'];
    }

    /**
     * Sets featured
     *
     * @param bool $featured Featured product.
     *
     * @return $this
     */
    public function setFeatured($featured)
    {
        $this->container['featured'] = $featured;

        return $this;
    }

    /**
     * Gets catalog_visibility
     *
     * @return string
     */
    public function getCatalogVisibility()
    {
        return $this->container['catalog_visibility'];
    }

    /**
     * Sets catalog_visibility
     *
     * @param string $catalog_visibility Catalog visibility.
     *
     * @return $this
     */
    public function setCatalogVisibility($catalog_visibility)
    {
        $allowedValues = $this->getCatalogVisibilityAllowableValues();
        if (!is_null($catalog_visibility) && !in_array($catalog_visibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'catalog_visibility', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['catalog_visibility'] = $catalog_visibility;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Product description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description Product short description.
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku Unique identifier.
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets regular_price
     *
     * @return string
     */
    public function getRegularPrice()
    {
        return $this->container['regular_price'];
    }

    /**
     * Sets regular_price
     *
     * @param string $regular_price Product regular price.
     *
     * @return $this
     */
    public function setRegularPrice($regular_price)
    {
        $this->container['regular_price'] = $regular_price;

        return $this;
    }

    /**
     * Gets sale_price
     *
     * @return string
     */
    public function getSalePrice()
    {
        return $this->container['sale_price'];
    }

    /**
     * Sets sale_price
     *
     * @param string $sale_price Product sale price.
     *
     * @return $this
     */
    public function setSalePrice($sale_price)
    {
        $this->container['sale_price'] = $sale_price;

        return $this;
    }

    /**
     * Gets date_on_sale_from
     *
     * @return string
     */
    public function getDateOnSaleFrom()
    {
        return $this->container['date_on_sale_from'];
    }

    /**
     * Sets date_on_sale_from
     *
     * @param string $date_on_sale_from Start date of sale price, in the site's timezone.
     *
     * @return $this
     */
    public function setDateOnSaleFrom($date_on_sale_from)
    {
        $this->container['date_on_sale_from'] = $date_on_sale_from;

        return $this;
    }

    /**
     * Gets date_on_sale_from_gmt
     *
     * @return string
     */
    public function getDateOnSaleFromGmt()
    {
        return $this->container['date_on_sale_from_gmt'];
    }

    /**
     * Sets date_on_sale_from_gmt
     *
     * @param string $date_on_sale_from_gmt Start date of sale price, as GMT.
     *
     * @return $this
     */
    public function setDateOnSaleFromGmt($date_on_sale_from_gmt)
    {
        $this->container['date_on_sale_from_gmt'] = $date_on_sale_from_gmt;

        return $this;
    }

    /**
     * Gets date_on_sale_to
     *
     * @return string
     */
    public function getDateOnSaleTo()
    {
        return $this->container['date_on_sale_to'];
    }

    /**
     * Sets date_on_sale_to
     *
     * @param string $date_on_sale_to End date of sale price, in the site's timezone.
     *
     * @return $this
     */
    public function setDateOnSaleTo($date_on_sale_to)
    {
        $this->container['date_on_sale_to'] = $date_on_sale_to;

        return $this;
    }

    /**
     * Gets date_on_sale_to_gmt
     *
     * @return string
     */
    public function getDateOnSaleToGmt()
    {
        return $this->container['date_on_sale_to_gmt'];
    }

    /**
     * Sets date_on_sale_to_gmt
     *
     * @param string $date_on_sale_to_gmt End date of sale price, in the site's timezone.
     *
     * @return $this
     */
    public function setDateOnSaleToGmt($date_on_sale_to_gmt)
    {
        $this->container['date_on_sale_to_gmt'] = $date_on_sale_to_gmt;

        return $this;
    }

    /**
     * Gets virtual
     *
     * @return bool
     */
    public function getVirtual()
    {
        return $this->container['virtual'];
    }

    /**
     * Sets virtual
     *
     * @param bool $virtual If the product is virtual.
     *
     * @return $this
     */
    public function setVirtual($virtual)
    {
        $this->container['virtual'] = $virtual;

        return $this;
    }

    /**
     * Gets downloadable
     *
     * @return bool
     */
    public function getDownloadable()
    {
        return $this->container['downloadable'];
    }

    /**
     * Sets downloadable
     *
     * @param bool $downloadable If the product is downloadable.
     *
     * @return $this
     */
    public function setDownloadable($downloadable)
    {
        $this->container['downloadable'] = $downloadable;

        return $this;
    }

    /**
     * Gets downloads
     *
     * @return \WooCommerce\Client\Model\ProductsDownloads[]
     */
    public function getDownloads()
    {
        return $this->container['downloads'];
    }

    /**
     * Sets downloads
     *
     * @param \WooCommerce\Client\Model\ProductsDownloads[] $downloads List of downloadable files.
     *
     * @return $this
     */
    public function setDownloads($downloads)
    {
        $this->container['downloads'] = $downloads;

        return $this;
    }

    /**
     * Gets download_limit
     *
     * @return int
     */
    public function getDownloadLimit()
    {
        return $this->container['download_limit'];
    }

    /**
     * Sets download_limit
     *
     * @param int $download_limit Number of times downloadable files can be downloaded after purchase.
     *
     * @return $this
     */
    public function setDownloadLimit($download_limit)
    {
        $this->container['download_limit'] = $download_limit;

        return $this;
    }

    /**
     * Gets download_expiry
     *
     * @return int
     */
    public function getDownloadExpiry()
    {
        return $this->container['download_expiry'];
    }

    /**
     * Sets download_expiry
     *
     * @param int $download_expiry Number of days until access to downloadable files expires.
     *
     * @return $this
     */
    public function setDownloadExpiry($download_expiry)
    {
        $this->container['download_expiry'] = $download_expiry;

        return $this;
    }

    /**
     * Gets external_url
     *
     * @return string
     */
    public function getExternalUrl()
    {
        return $this->container['external_url'];
    }

    /**
     * Sets external_url
     *
     * @param string $external_url Product external URL. Only for external products.
     *
     * @return $this
     */
    public function setExternalUrl($external_url)
    {
        $this->container['external_url'] = $external_url;

        return $this;
    }

    /**
     * Gets button_text
     *
     * @return string
     */
    public function getButtonText()
    {
        return $this->container['button_text'];
    }

    /**
     * Sets button_text
     *
     * @param string $button_text Product external button text. Only for external products.
     *
     * @return $this
     */
    public function setButtonText($button_text)
    {
        $this->container['button_text'] = $button_text;

        return $this;
    }

    /**
     * Gets tax_status
     *
     * @return string
     */
    public function getTaxStatus()
    {
        return $this->container['tax_status'];
    }

    /**
     * Sets tax_status
     *
     * @param string $tax_status Tax status.
     *
     * @return $this
     */
    public function setTaxStatus($tax_status)
    {
        $allowedValues = $this->getTaxStatusAllowableValues();
        if (!is_null($tax_status) && !in_array($tax_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_status'] = $tax_status;

        return $this;
    }

    /**
     * Gets tax_class
     *
     * @return string
     */
    public function getTaxClass()
    {
        return $this->container['tax_class'];
    }

    /**
     * Sets tax_class
     *
     * @param string $tax_class Tax class.
     *
     * @return $this
     */
    public function setTaxClass($tax_class)
    {
        $this->container['tax_class'] = $tax_class;

        return $this;
    }

    /**
     * Gets manage_stock
     *
     * @return bool
     */
    public function getManageStock()
    {
        return $this->container['manage_stock'];
    }

    /**
     * Sets manage_stock
     *
     * @param bool $manage_stock Stock management at product level.
     *
     * @return $this
     */
    public function setManageStock($manage_stock)
    {
        $this->container['manage_stock'] = $manage_stock;

        return $this;
    }

    /**
     * Gets stock_quantity
     *
     * @return int
     */
    public function getStockQuantity()
    {
        return $this->container['stock_quantity'];
    }

    /**
     * Sets stock_quantity
     *
     * @param int $stock_quantity Stock quantity.
     *
     * @return $this
     */
    public function setStockQuantity($stock_quantity)
    {
        $this->container['stock_quantity'] = $stock_quantity;

        return $this;
    }

    /**
     * Gets stock_status
     *
     * @return string
     */
    public function getStockStatus()
    {
        return $this->container['stock_status'];
    }

    /**
     * Sets stock_status
     *
     * @param string $stock_status Controls the stock status of the product.
     *
     * @return $this
     */
    public function setStockStatus($stock_status)
    {
        $allowedValues = $this->getStockStatusAllowableValues();
        if (!is_null($stock_status) && !in_array($stock_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'stock_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stock_status'] = $stock_status;

        return $this;
    }

    /**
     * Gets backorders
     *
     * @return string
     */
    public function getBackorders()
    {
        return $this->container['backorders'];
    }

    /**
     * Sets backorders
     *
     * @param string $backorders If managing stock, this controls if backorders are allowed.
     *
     * @return $this
     */
    public function setBackorders($backorders)
    {
        $allowedValues = $this->getBackordersAllowableValues();
        if (!is_null($backorders) && !in_array($backorders, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'backorders', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['backorders'] = $backorders;

        return $this;
    }

    /**
     * Gets low_stock_amount
     *
     * @return int
     */
    public function getLowStockAmount()
    {
        return $this->container['low_stock_amount'];
    }

    /**
     * Sets low_stock_amount
     *
     * @param int $low_stock_amount Low Stock amount for the product.
     *
     * @return $this
     */
    public function setLowStockAmount($low_stock_amount)
    {
        $this->container['low_stock_amount'] = $low_stock_amount;

        return $this;
    }

    /**
     * Gets sold_individually
     *
     * @return bool
     */
    public function getSoldIndividually()
    {
        return $this->container['sold_individually'];
    }

    /**
     * Sets sold_individually
     *
     * @param bool $sold_individually Allow one item to be bought in a single order.
     *
     * @return $this
     */
    public function setSoldIndividually($sold_individually)
    {
        $this->container['sold_individually'] = $sold_individually;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string $weight Product weight (kg).
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \WooCommerce\Client\Model\ProductsDimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \WooCommerce\Client\Model\ProductsDimensions $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets shipping_class
     *
     * @return string
     */
    public function getShippingClass()
    {
        return $this->container['shipping_class'];
    }

    /**
     * Sets shipping_class
     *
     * @param string $shipping_class Shipping class slug.
     *
     * @return $this
     */
    public function setShippingClass($shipping_class)
    {
        $this->container['shipping_class'] = $shipping_class;

        return $this;
    }

    /**
     * Gets reviews_allowed
     *
     * @return bool
     */
    public function getReviewsAllowed()
    {
        return $this->container['reviews_allowed'];
    }

    /**
     * Sets reviews_allowed
     *
     * @param bool $reviews_allowed Allow reviews.
     *
     * @return $this
     */
    public function setReviewsAllowed($reviews_allowed)
    {
        $this->container['reviews_allowed'] = $reviews_allowed;

        return $this;
    }

    /**
     * Gets upsell_ids
     *
     * @return int[]
     */
    public function getUpsellIds()
    {
        return $this->container['upsell_ids'];
    }

    /**
     * Sets upsell_ids
     *
     * @param int[] $upsell_ids List of up-sell products IDs.
     *
     * @return $this
     */
    public function setUpsellIds($upsell_ids)
    {
        $this->container['upsell_ids'] = $upsell_ids;

        return $this;
    }

    /**
     * Gets cross_sell_ids
     *
     * @return int[]
     */
    public function getCrossSellIds()
    {
        return $this->container['cross_sell_ids'];
    }

    /**
     * Sets cross_sell_ids
     *
     * @param int[] $cross_sell_ids List of cross-sell products IDs.
     *
     * @return $this
     */
    public function setCrossSellIds($cross_sell_ids)
    {
        $this->container['cross_sell_ids'] = $cross_sell_ids;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id Product parent ID.
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets purchase_note
     *
     * @return string
     */
    public function getPurchaseNote()
    {
        return $this->container['purchase_note'];
    }

    /**
     * Sets purchase_note
     *
     * @param string $purchase_note Optional note to send the customer after purchase.
     *
     * @return $this
     */
    public function setPurchaseNote($purchase_note)
    {
        $this->container['purchase_note'] = $purchase_note;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \WooCommerce\Client\Model\ProductsCategories[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \WooCommerce\Client\Model\ProductsCategories[] $categories List of categories.
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \WooCommerce\Client\Model\ProductsTags[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \WooCommerce\Client\Model\ProductsTags[] $tags List of tags.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \WooCommerce\Client\Model\ProductsImages[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \WooCommerce\Client\Model\ProductsImages[] $images List of images.
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \WooCommerce\Client\Model\ProductsAttributes[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \WooCommerce\Client\Model\ProductsAttributes[] $attributes List of attributes.
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets default_attributes
     *
     * @return \WooCommerce\Client\Model\ProductsDefaultAttributes[]
     */
    public function getDefaultAttributes()
    {
        return $this->container['default_attributes'];
    }

    /**
     * Sets default_attributes
     *
     * @param \WooCommerce\Client\Model\ProductsDefaultAttributes[] $default_attributes Defaults variation attributes.
     *
     * @return $this
     */
    public function setDefaultAttributes($default_attributes)
    {
        $this->container['default_attributes'] = $default_attributes;

        return $this;
    }

    /**
     * Gets menu_order
     *
     * @return int
     */
    public function getMenuOrder()
    {
        return $this->container['menu_order'];
    }

    /**
     * Sets menu_order
     *
     * @param int $menu_order Menu order, used to custom sort products.
     *
     * @return $this
     */
    public function setMenuOrder($menu_order)
    {
        $this->container['menu_order'] = $menu_order;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return \WooCommerce\Client\Model\CouponsMetaData[]
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param \WooCommerce\Client\Model\CouponsMetaData[] $meta_data Meta data.
     *
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
