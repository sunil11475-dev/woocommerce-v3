<?php
/**
 * SalesReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * wc/v3
 *
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WooCommerce\Client\Model;

use \ArrayAccess;
use \WooCommerce\Client\ObjectSerializer;

/**
 * SalesReport Class Doc Comment
 *
 * @category Class
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sales_report';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_sales' => 'string',
'net_sales' => 'string',
'average_sales' => 'string',
'total_orders' => 'int',
'total_items' => 'int',
'total_tax' => 'string',
'total_shipping' => 'string',
'total_refunds' => 'int',
'total_discount' => 'int',
'totals_grouped_by' => 'string',
'totals' => 'int[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total_sales' => null,
'net_sales' => null,
'average_sales' => null,
'total_orders' => null,
'total_items' => null,
'total_tax' => null,
'total_shipping' => null,
'total_refunds' => null,
'total_discount' => null,
'totals_grouped_by' => null,
'totals' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_sales' => 'total_sales',
'net_sales' => 'net_sales',
'average_sales' => 'average_sales',
'total_orders' => 'total_orders',
'total_items' => 'total_items',
'total_tax' => 'total_tax',
'total_shipping' => 'total_shipping',
'total_refunds' => 'total_refunds',
'total_discount' => 'total_discount',
'totals_grouped_by' => 'totals_grouped_by',
'totals' => 'totals'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_sales' => 'setTotalSales',
'net_sales' => 'setNetSales',
'average_sales' => 'setAverageSales',
'total_orders' => 'setTotalOrders',
'total_items' => 'setTotalItems',
'total_tax' => 'setTotalTax',
'total_shipping' => 'setTotalShipping',
'total_refunds' => 'setTotalRefunds',
'total_discount' => 'setTotalDiscount',
'totals_grouped_by' => 'setTotalsGroupedBy',
'totals' => 'setTotals'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_sales' => 'getTotalSales',
'net_sales' => 'getNetSales',
'average_sales' => 'getAverageSales',
'total_orders' => 'getTotalOrders',
'total_items' => 'getTotalItems',
'total_tax' => 'getTotalTax',
'total_shipping' => 'getTotalShipping',
'total_refunds' => 'getTotalRefunds',
'total_discount' => 'getTotalDiscount',
'totals_grouped_by' => 'getTotalsGroupedBy',
'totals' => 'getTotals'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_sales'] = isset($data['total_sales']) ? $data['total_sales'] : null;
        $this->container['net_sales'] = isset($data['net_sales']) ? $data['net_sales'] : null;
        $this->container['average_sales'] = isset($data['average_sales']) ? $data['average_sales'] : null;
        $this->container['total_orders'] = isset($data['total_orders']) ? $data['total_orders'] : null;
        $this->container['total_items'] = isset($data['total_items']) ? $data['total_items'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['total_shipping'] = isset($data['total_shipping']) ? $data['total_shipping'] : null;
        $this->container['total_refunds'] = isset($data['total_refunds']) ? $data['total_refunds'] : null;
        $this->container['total_discount'] = isset($data['total_discount']) ? $data['total_discount'] : null;
        $this->container['totals_grouped_by'] = isset($data['totals_grouped_by']) ? $data['totals_grouped_by'] : null;
        $this->container['totals'] = isset($data['totals']) ? $data['totals'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_sales
     *
     * @return string
     */
    public function getTotalSales()
    {
        return $this->container['total_sales'];
    }

    /**
     * Sets total_sales
     *
     * @param string $total_sales Gross sales in the period.
     *
     * @return $this
     */
    public function setTotalSales($total_sales)
    {
        $this->container['total_sales'] = $total_sales;

        return $this;
    }

    /**
     * Gets net_sales
     *
     * @return string
     */
    public function getNetSales()
    {
        return $this->container['net_sales'];
    }

    /**
     * Sets net_sales
     *
     * @param string $net_sales Net sales in the period.
     *
     * @return $this
     */
    public function setNetSales($net_sales)
    {
        $this->container['net_sales'] = $net_sales;

        return $this;
    }

    /**
     * Gets average_sales
     *
     * @return string
     */
    public function getAverageSales()
    {
        return $this->container['average_sales'];
    }

    /**
     * Sets average_sales
     *
     * @param string $average_sales Average net daily sales.
     *
     * @return $this
     */
    public function setAverageSales($average_sales)
    {
        $this->container['average_sales'] = $average_sales;

        return $this;
    }

    /**
     * Gets total_orders
     *
     * @return int
     */
    public function getTotalOrders()
    {
        return $this->container['total_orders'];
    }

    /**
     * Sets total_orders
     *
     * @param int $total_orders Total of orders placed.
     *
     * @return $this
     */
    public function setTotalOrders($total_orders)
    {
        $this->container['total_orders'] = $total_orders;

        return $this;
    }

    /**
     * Gets total_items
     *
     * @return int
     */
    public function getTotalItems()
    {
        return $this->container['total_items'];
    }

    /**
     * Sets total_items
     *
     * @param int $total_items Total of items purchased.
     *
     * @return $this
     */
    public function setTotalItems($total_items)
    {
        $this->container['total_items'] = $total_items;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return string
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param string $total_tax Total charged for taxes.
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets total_shipping
     *
     * @return string
     */
    public function getTotalShipping()
    {
        return $this->container['total_shipping'];
    }

    /**
     * Sets total_shipping
     *
     * @param string $total_shipping Total charged for shipping.
     *
     * @return $this
     */
    public function setTotalShipping($total_shipping)
    {
        $this->container['total_shipping'] = $total_shipping;

        return $this;
    }

    /**
     * Gets total_refunds
     *
     * @return int
     */
    public function getTotalRefunds()
    {
        return $this->container['total_refunds'];
    }

    /**
     * Sets total_refunds
     *
     * @param int $total_refunds Total of refunded orders.
     *
     * @return $this
     */
    public function setTotalRefunds($total_refunds)
    {
        $this->container['total_refunds'] = $total_refunds;

        return $this;
    }

    /**
     * Gets total_discount
     *
     * @return int
     */
    public function getTotalDiscount()
    {
        return $this->container['total_discount'];
    }

    /**
     * Sets total_discount
     *
     * @param int $total_discount Total of coupons used.
     *
     * @return $this
     */
    public function setTotalDiscount($total_discount)
    {
        $this->container['total_discount'] = $total_discount;

        return $this;
    }

    /**
     * Gets totals_grouped_by
     *
     * @return string
     */
    public function getTotalsGroupedBy()
    {
        return $this->container['totals_grouped_by'];
    }

    /**
     * Sets totals_grouped_by
     *
     * @param string $totals_grouped_by Group type.
     *
     * @return $this
     */
    public function setTotalsGroupedBy($totals_grouped_by)
    {
        $this->container['totals_grouped_by'] = $totals_grouped_by;

        return $this;
    }

    /**
     * Gets totals
     *
     * @return int[]
     */
    public function getTotals()
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param int[] $totals Totals.
     *
     * @return $this
     */
    public function setTotals($totals)
    {
        $this->container['totals'] = $totals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
