<?php
/**
 * ShopOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * wc/v3
 *
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WooCommerce\Client\Model;

use \ArrayAccess;
use \WooCommerce\Client\ObjectSerializer;

/**
 * ShopOrder Class Doc Comment
 *
 * @category Class
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShopOrder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'shop_order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'parent_id' => 'int',
'number' => 'string',
'order_key' => 'string',
'created_via' => 'string',
'version' => 'int',
'status' => 'string',
'currency' => 'string',
'date_created' => 'string',
'date_created_gmt' => 'string',
'date_modified' => 'string',
'date_modified_gmt' => 'string',
'discount_total' => 'string',
'discount_tax' => 'string',
'shipping_total' => 'string',
'shipping_tax' => 'string',
'cart_tax' => 'string',
'total' => 'string',
'total_tax' => 'string',
'prices_include_tax' => 'bool',
'customer_id' => 'int',
'customer_ip_address' => 'string',
'customer_user_agent' => 'string',
'customer_note' => 'string',
'billing' => '\WooCommerce\Client\Model\OrdersBilling',
'shipping' => '\WooCommerce\Client\Model\OrdersShipping',
'payment_method' => 'string',
'payment_method_title' => 'string',
'transaction_id' => 'string',
'date_paid' => 'string',
'date_paid_gmt' => 'string',
'date_completed' => 'string',
'date_completed_gmt' => 'string',
'cart_hash' => 'string',
'meta_data' => '\WooCommerce\Client\Model\CouponsMetaData[]',
'line_items' => '\WooCommerce\Client\Model\OrdersLineItems[]',
'tax_lines' => '\WooCommerce\Client\Model\ShopOrderTaxLines[]',
'shipping_lines' => '\WooCommerce\Client\Model\OrdersShippingLines[]',
'fee_lines' => '\WooCommerce\Client\Model\OrdersFeeLines[]',
'coupon_lines' => '\WooCommerce\Client\Model\OrdersCouponLines[]',
'refunds' => '\WooCommerce\Client\Model\ShopOrderRefunds[]',
'set_paid' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'parent_id' => null,
'number' => null,
'order_key' => null,
'created_via' => null,
'version' => null,
'status' => null,
'currency' => null,
'date_created' => null,
'date_created_gmt' => null,
'date_modified' => null,
'date_modified_gmt' => null,
'discount_total' => null,
'discount_tax' => null,
'shipping_total' => null,
'shipping_tax' => null,
'cart_tax' => null,
'total' => null,
'total_tax' => null,
'prices_include_tax' => null,
'customer_id' => null,
'customer_ip_address' => null,
'customer_user_agent' => null,
'customer_note' => null,
'billing' => null,
'shipping' => null,
'payment_method' => null,
'payment_method_title' => null,
'transaction_id' => null,
'date_paid' => null,
'date_paid_gmt' => null,
'date_completed' => null,
'date_completed_gmt' => null,
'cart_hash' => null,
'meta_data' => null,
'line_items' => null,
'tax_lines' => null,
'shipping_lines' => null,
'fee_lines' => null,
'coupon_lines' => null,
'refunds' => null,
'set_paid' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'parent_id' => 'parent_id',
'number' => 'number',
'order_key' => 'order_key',
'created_via' => 'created_via',
'version' => 'version',
'status' => 'status',
'currency' => 'currency',
'date_created' => 'date_created',
'date_created_gmt' => 'date_created_gmt',
'date_modified' => 'date_modified',
'date_modified_gmt' => 'date_modified_gmt',
'discount_total' => 'discount_total',
'discount_tax' => 'discount_tax',
'shipping_total' => 'shipping_total',
'shipping_tax' => 'shipping_tax',
'cart_tax' => 'cart_tax',
'total' => 'total',
'total_tax' => 'total_tax',
'prices_include_tax' => 'prices_include_tax',
'customer_id' => 'customer_id',
'customer_ip_address' => 'customer_ip_address',
'customer_user_agent' => 'customer_user_agent',
'customer_note' => 'customer_note',
'billing' => 'billing',
'shipping' => 'shipping',
'payment_method' => 'payment_method',
'payment_method_title' => 'payment_method_title',
'transaction_id' => 'transaction_id',
'date_paid' => 'date_paid',
'date_paid_gmt' => 'date_paid_gmt',
'date_completed' => 'date_completed',
'date_completed_gmt' => 'date_completed_gmt',
'cart_hash' => 'cart_hash',
'meta_data' => 'meta_data',
'line_items' => 'line_items',
'tax_lines' => 'tax_lines',
'shipping_lines' => 'shipping_lines',
'fee_lines' => 'fee_lines',
'coupon_lines' => 'coupon_lines',
'refunds' => 'refunds',
'set_paid' => 'set_paid'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'parent_id' => 'setParentId',
'number' => 'setNumber',
'order_key' => 'setOrderKey',
'created_via' => 'setCreatedVia',
'version' => 'setVersion',
'status' => 'setStatus',
'currency' => 'setCurrency',
'date_created' => 'setDateCreated',
'date_created_gmt' => 'setDateCreatedGmt',
'date_modified' => 'setDateModified',
'date_modified_gmt' => 'setDateModifiedGmt',
'discount_total' => 'setDiscountTotal',
'discount_tax' => 'setDiscountTax',
'shipping_total' => 'setShippingTotal',
'shipping_tax' => 'setShippingTax',
'cart_tax' => 'setCartTax',
'total' => 'setTotal',
'total_tax' => 'setTotalTax',
'prices_include_tax' => 'setPricesIncludeTax',
'customer_id' => 'setCustomerId',
'customer_ip_address' => 'setCustomerIpAddress',
'customer_user_agent' => 'setCustomerUserAgent',
'customer_note' => 'setCustomerNote',
'billing' => 'setBilling',
'shipping' => 'setShipping',
'payment_method' => 'setPaymentMethod',
'payment_method_title' => 'setPaymentMethodTitle',
'transaction_id' => 'setTransactionId',
'date_paid' => 'setDatePaid',
'date_paid_gmt' => 'setDatePaidGmt',
'date_completed' => 'setDateCompleted',
'date_completed_gmt' => 'setDateCompletedGmt',
'cart_hash' => 'setCartHash',
'meta_data' => 'setMetaData',
'line_items' => 'setLineItems',
'tax_lines' => 'setTaxLines',
'shipping_lines' => 'setShippingLines',
'fee_lines' => 'setFeeLines',
'coupon_lines' => 'setCouponLines',
'refunds' => 'setRefunds',
'set_paid' => 'setSetPaid'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'parent_id' => 'getParentId',
'number' => 'getNumber',
'order_key' => 'getOrderKey',
'created_via' => 'getCreatedVia',
'version' => 'getVersion',
'status' => 'getStatus',
'currency' => 'getCurrency',
'date_created' => 'getDateCreated',
'date_created_gmt' => 'getDateCreatedGmt',
'date_modified' => 'getDateModified',
'date_modified_gmt' => 'getDateModifiedGmt',
'discount_total' => 'getDiscountTotal',
'discount_tax' => 'getDiscountTax',
'shipping_total' => 'getShippingTotal',
'shipping_tax' => 'getShippingTax',
'cart_tax' => 'getCartTax',
'total' => 'getTotal',
'total_tax' => 'getTotalTax',
'prices_include_tax' => 'getPricesIncludeTax',
'customer_id' => 'getCustomerId',
'customer_ip_address' => 'getCustomerIpAddress',
'customer_user_agent' => 'getCustomerUserAgent',
'customer_note' => 'getCustomerNote',
'billing' => 'getBilling',
'shipping' => 'getShipping',
'payment_method' => 'getPaymentMethod',
'payment_method_title' => 'getPaymentMethodTitle',
'transaction_id' => 'getTransactionId',
'date_paid' => 'getDatePaid',
'date_paid_gmt' => 'getDatePaidGmt',
'date_completed' => 'getDateCompleted',
'date_completed_gmt' => 'getDateCompletedGmt',
'cart_hash' => 'getCartHash',
'meta_data' => 'getMetaData',
'line_items' => 'getLineItems',
'tax_lines' => 'getTaxLines',
'shipping_lines' => 'getShippingLines',
'fee_lines' => 'getFeeLines',
'coupon_lines' => 'getCouponLines',
'refunds' => 'getRefunds',
'set_paid' => 'getSetPaid'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_PENDING = 'pending';
const STATUS_PROCESSING = 'processing';
const STATUS_ON_HOLD = 'on-hold';
const STATUS_COMPLETED = 'completed';
const STATUS_CANCELLED = 'cancelled';
const STATUS_REFUNDED = 'refunded';
const STATUS_FAILED = 'failed';
const CURRENCY_AED = 'AED';
const CURRENCY_AFN = 'AFN';
const CURRENCY_ALL = 'ALL';
const CURRENCY_AMD = 'AMD';
const CURRENCY_ANG = 'ANG';
const CURRENCY_AOA = 'AOA';
const CURRENCY_ARS = 'ARS';
const CURRENCY_AUD = 'AUD';
const CURRENCY_AWG = 'AWG';
const CURRENCY_AZN = 'AZN';
const CURRENCY_BAM = 'BAM';
const CURRENCY_BBD = 'BBD';
const CURRENCY_BDT = 'BDT';
const CURRENCY_BGN = 'BGN';
const CURRENCY_BHD = 'BHD';
const CURRENCY_BIF = 'BIF';
const CURRENCY_BMD = 'BMD';
const CURRENCY_BND = 'BND';
const CURRENCY_BOB = 'BOB';
const CURRENCY_BRL = 'BRL';
const CURRENCY_BSD = 'BSD';
const CURRENCY_BTC = 'BTC';
const CURRENCY_BTN = 'BTN';
const CURRENCY_BWP = 'BWP';
const CURRENCY_BYR = 'BYR';
const CURRENCY_BYN = 'BYN';
const CURRENCY_BZD = 'BZD';
const CURRENCY_CAD = 'CAD';
const CURRENCY_CDF = 'CDF';
const CURRENCY_CHF = 'CHF';
const CURRENCY_CLP = 'CLP';
const CURRENCY_CNY = 'CNY';
const CURRENCY_COP = 'COP';
const CURRENCY_CRC = 'CRC';
const CURRENCY_CUC = 'CUC';
const CURRENCY_CUP = 'CUP';
const CURRENCY_CVE = 'CVE';
const CURRENCY_CZK = 'CZK';
const CURRENCY_DJF = 'DJF';
const CURRENCY_DKK = 'DKK';
const CURRENCY_DOP = 'DOP';
const CURRENCY_DZD = 'DZD';
const CURRENCY_EGP = 'EGP';
const CURRENCY_ERN = 'ERN';
const CURRENCY_ETB = 'ETB';
const CURRENCY_EUR = 'EUR';
const CURRENCY_FJD = 'FJD';
const CURRENCY_FKP = 'FKP';
const CURRENCY_GBP = 'GBP';
const CURRENCY_GEL = 'GEL';
const CURRENCY_GGP = 'GGP';
const CURRENCY_GHS = 'GHS';
const CURRENCY_GIP = 'GIP';
const CURRENCY_GMD = 'GMD';
const CURRENCY_GNF = 'GNF';
const CURRENCY_GTQ = 'GTQ';
const CURRENCY_GYD = 'GYD';
const CURRENCY_HKD = 'HKD';
const CURRENCY_HNL = 'HNL';
const CURRENCY_HRK = 'HRK';
const CURRENCY_HTG = 'HTG';
const CURRENCY_HUF = 'HUF';
const CURRENCY_IDR = 'IDR';
const CURRENCY_ILS = 'ILS';
const CURRENCY_IMP = 'IMP';
const CURRENCY_INR = 'INR';
const CURRENCY_IQD = 'IQD';
const CURRENCY_IRR = 'IRR';
const CURRENCY_IRT = 'IRT';
const CURRENCY_ISK = 'ISK';
const CURRENCY_JEP = 'JEP';
const CURRENCY_JMD = 'JMD';
const CURRENCY_JOD = 'JOD';
const CURRENCY_JPY = 'JPY';
const CURRENCY_KES = 'KES';
const CURRENCY_KGS = 'KGS';
const CURRENCY_KHR = 'KHR';
const CURRENCY_KMF = 'KMF';
const CURRENCY_KPW = 'KPW';
const CURRENCY_KRW = 'KRW';
const CURRENCY_KWD = 'KWD';
const CURRENCY_KYD = 'KYD';
const CURRENCY_KZT = 'KZT';
const CURRENCY_LAK = 'LAK';
const CURRENCY_LBP = 'LBP';
const CURRENCY_LKR = 'LKR';
const CURRENCY_LRD = 'LRD';
const CURRENCY_LSL = 'LSL';
const CURRENCY_LYD = 'LYD';
const CURRENCY_MAD = 'MAD';
const CURRENCY_MDL = 'MDL';
const CURRENCY_MGA = 'MGA';
const CURRENCY_MKD = 'MKD';
const CURRENCY_MMK = 'MMK';
const CURRENCY_MNT = 'MNT';
const CURRENCY_MOP = 'MOP';
const CURRENCY_MRU = 'MRU';
const CURRENCY_MUR = 'MUR';
const CURRENCY_MVR = 'MVR';
const CURRENCY_MWK = 'MWK';
const CURRENCY_MXN = 'MXN';
const CURRENCY_MYR = 'MYR';
const CURRENCY_MZN = 'MZN';
const CURRENCY_NAD = 'NAD';
const CURRENCY_NGN = 'NGN';
const CURRENCY_NIO = 'NIO';
const CURRENCY_NOK = 'NOK';
const CURRENCY_NPR = 'NPR';
const CURRENCY_NZD = 'NZD';
const CURRENCY_OMR = 'OMR';
const CURRENCY_PAB = 'PAB';
const CURRENCY_PEN = 'PEN';
const CURRENCY_PGK = 'PGK';
const CURRENCY_PHP = 'PHP';
const CURRENCY_PKR = 'PKR';
const CURRENCY_PLN = 'PLN';
const CURRENCY_PRB = 'PRB';
const CURRENCY_PYG = 'PYG';
const CURRENCY_QAR = 'QAR';
const CURRENCY_RON = 'RON';
const CURRENCY_RSD = 'RSD';
const CURRENCY_RUB = 'RUB';
const CURRENCY_RWF = 'RWF';
const CURRENCY_SAR = 'SAR';
const CURRENCY_SBD = 'SBD';
const CURRENCY_SCR = 'SCR';
const CURRENCY_SDG = 'SDG';
const CURRENCY_SEK = 'SEK';
const CURRENCY_SGD = 'SGD';
const CURRENCY_SHP = 'SHP';
const CURRENCY_SLL = 'SLL';
const CURRENCY_SOS = 'SOS';
const CURRENCY_SRD = 'SRD';
const CURRENCY_SSP = 'SSP';
const CURRENCY_STN = 'STN';
const CURRENCY_SYP = 'SYP';
const CURRENCY_SZL = 'SZL';
const CURRENCY_THB = 'THB';
const CURRENCY_TJS = 'TJS';
const CURRENCY_TMT = 'TMT';
const CURRENCY_TND = 'TND';
const CURRENCY_TOP = 'TOP';
const CURRENCY__TRY = 'TRY';
const CURRENCY_TTD = 'TTD';
const CURRENCY_TWD = 'TWD';
const CURRENCY_TZS = 'TZS';
const CURRENCY_UAH = 'UAH';
const CURRENCY_UGX = 'UGX';
const CURRENCY_USD = 'USD';
const CURRENCY_UYU = 'UYU';
const CURRENCY_UZS = 'UZS';
const CURRENCY_VEF = 'VEF';
const CURRENCY_VES = 'VES';
const CURRENCY_VND = 'VND';
const CURRENCY_VUV = 'VUV';
const CURRENCY_WST = 'WST';
const CURRENCY_XAF = 'XAF';
const CURRENCY_XCD = 'XCD';
const CURRENCY_XOF = 'XOF';
const CURRENCY_XPF = 'XPF';
const CURRENCY_YER = 'YER';
const CURRENCY_ZAR = 'ZAR';
const CURRENCY_ZMW = 'ZMW';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
self::STATUS_PROCESSING,
self::STATUS_ON_HOLD,
self::STATUS_COMPLETED,
self::STATUS_CANCELLED,
self::STATUS_REFUNDED,
self::STATUS_FAILED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_AED,
self::CURRENCY_AFN,
self::CURRENCY_ALL,
self::CURRENCY_AMD,
self::CURRENCY_ANG,
self::CURRENCY_AOA,
self::CURRENCY_ARS,
self::CURRENCY_AUD,
self::CURRENCY_AWG,
self::CURRENCY_AZN,
self::CURRENCY_BAM,
self::CURRENCY_BBD,
self::CURRENCY_BDT,
self::CURRENCY_BGN,
self::CURRENCY_BHD,
self::CURRENCY_BIF,
self::CURRENCY_BMD,
self::CURRENCY_BND,
self::CURRENCY_BOB,
self::CURRENCY_BRL,
self::CURRENCY_BSD,
self::CURRENCY_BTC,
self::CURRENCY_BTN,
self::CURRENCY_BWP,
self::CURRENCY_BYR,
self::CURRENCY_BYN,
self::CURRENCY_BZD,
self::CURRENCY_CAD,
self::CURRENCY_CDF,
self::CURRENCY_CHF,
self::CURRENCY_CLP,
self::CURRENCY_CNY,
self::CURRENCY_COP,
self::CURRENCY_CRC,
self::CURRENCY_CUC,
self::CURRENCY_CUP,
self::CURRENCY_CVE,
self::CURRENCY_CZK,
self::CURRENCY_DJF,
self::CURRENCY_DKK,
self::CURRENCY_DOP,
self::CURRENCY_DZD,
self::CURRENCY_EGP,
self::CURRENCY_ERN,
self::CURRENCY_ETB,
self::CURRENCY_EUR,
self::CURRENCY_FJD,
self::CURRENCY_FKP,
self::CURRENCY_GBP,
self::CURRENCY_GEL,
self::CURRENCY_GGP,
self::CURRENCY_GHS,
self::CURRENCY_GIP,
self::CURRENCY_GMD,
self::CURRENCY_GNF,
self::CURRENCY_GTQ,
self::CURRENCY_GYD,
self::CURRENCY_HKD,
self::CURRENCY_HNL,
self::CURRENCY_HRK,
self::CURRENCY_HTG,
self::CURRENCY_HUF,
self::CURRENCY_IDR,
self::CURRENCY_ILS,
self::CURRENCY_IMP,
self::CURRENCY_INR,
self::CURRENCY_IQD,
self::CURRENCY_IRR,
self::CURRENCY_IRT,
self::CURRENCY_ISK,
self::CURRENCY_JEP,
self::CURRENCY_JMD,
self::CURRENCY_JOD,
self::CURRENCY_JPY,
self::CURRENCY_KES,
self::CURRENCY_KGS,
self::CURRENCY_KHR,
self::CURRENCY_KMF,
self::CURRENCY_KPW,
self::CURRENCY_KRW,
self::CURRENCY_KWD,
self::CURRENCY_KYD,
self::CURRENCY_KZT,
self::CURRENCY_LAK,
self::CURRENCY_LBP,
self::CURRENCY_LKR,
self::CURRENCY_LRD,
self::CURRENCY_LSL,
self::CURRENCY_LYD,
self::CURRENCY_MAD,
self::CURRENCY_MDL,
self::CURRENCY_MGA,
self::CURRENCY_MKD,
self::CURRENCY_MMK,
self::CURRENCY_MNT,
self::CURRENCY_MOP,
self::CURRENCY_MRU,
self::CURRENCY_MUR,
self::CURRENCY_MVR,
self::CURRENCY_MWK,
self::CURRENCY_MXN,
self::CURRENCY_MYR,
self::CURRENCY_MZN,
self::CURRENCY_NAD,
self::CURRENCY_NGN,
self::CURRENCY_NIO,
self::CURRENCY_NOK,
self::CURRENCY_NPR,
self::CURRENCY_NZD,
self::CURRENCY_OMR,
self::CURRENCY_PAB,
self::CURRENCY_PEN,
self::CURRENCY_PGK,
self::CURRENCY_PHP,
self::CURRENCY_PKR,
self::CURRENCY_PLN,
self::CURRENCY_PRB,
self::CURRENCY_PYG,
self::CURRENCY_QAR,
self::CURRENCY_RON,
self::CURRENCY_RSD,
self::CURRENCY_RUB,
self::CURRENCY_RWF,
self::CURRENCY_SAR,
self::CURRENCY_SBD,
self::CURRENCY_SCR,
self::CURRENCY_SDG,
self::CURRENCY_SEK,
self::CURRENCY_SGD,
self::CURRENCY_SHP,
self::CURRENCY_SLL,
self::CURRENCY_SOS,
self::CURRENCY_SRD,
self::CURRENCY_SSP,
self::CURRENCY_STN,
self::CURRENCY_SYP,
self::CURRENCY_SZL,
self::CURRENCY_THB,
self::CURRENCY_TJS,
self::CURRENCY_TMT,
self::CURRENCY_TND,
self::CURRENCY_TOP,
self::CURRENCY__TRY,
self::CURRENCY_TTD,
self::CURRENCY_TWD,
self::CURRENCY_TZS,
self::CURRENCY_UAH,
self::CURRENCY_UGX,
self::CURRENCY_USD,
self::CURRENCY_UYU,
self::CURRENCY_UZS,
self::CURRENCY_VEF,
self::CURRENCY_VES,
self::CURRENCY_VND,
self::CURRENCY_VUV,
self::CURRENCY_WST,
self::CURRENCY_XAF,
self::CURRENCY_XCD,
self::CURRENCY_XOF,
self::CURRENCY_XPF,
self::CURRENCY_YER,
self::CURRENCY_ZAR,
self::CURRENCY_ZMW,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['order_key'] = isset($data['order_key']) ? $data['order_key'] : null;
        $this->container['created_via'] = isset($data['created_via']) ? $data['created_via'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_created_gmt'] = isset($data['date_created_gmt']) ? $data['date_created_gmt'] : null;
        $this->container['date_modified'] = isset($data['date_modified']) ? $data['date_modified'] : null;
        $this->container['date_modified_gmt'] = isset($data['date_modified_gmt']) ? $data['date_modified_gmt'] : null;
        $this->container['discount_total'] = isset($data['discount_total']) ? $data['discount_total'] : null;
        $this->container['discount_tax'] = isset($data['discount_tax']) ? $data['discount_tax'] : null;
        $this->container['shipping_total'] = isset($data['shipping_total']) ? $data['shipping_total'] : null;
        $this->container['shipping_tax'] = isset($data['shipping_tax']) ? $data['shipping_tax'] : null;
        $this->container['cart_tax'] = isset($data['cart_tax']) ? $data['cart_tax'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['prices_include_tax'] = isset($data['prices_include_tax']) ? $data['prices_include_tax'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['customer_ip_address'] = isset($data['customer_ip_address']) ? $data['customer_ip_address'] : null;
        $this->container['customer_user_agent'] = isset($data['customer_user_agent']) ? $data['customer_user_agent'] : null;
        $this->container['customer_note'] = isset($data['customer_note']) ? $data['customer_note'] : null;
        $this->container['billing'] = isset($data['billing']) ? $data['billing'] : null;
        $this->container['shipping'] = isset($data['shipping']) ? $data['shipping'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['payment_method_title'] = isset($data['payment_method_title']) ? $data['payment_method_title'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['date_paid'] = isset($data['date_paid']) ? $data['date_paid'] : null;
        $this->container['date_paid_gmt'] = isset($data['date_paid_gmt']) ? $data['date_paid_gmt'] : null;
        $this->container['date_completed'] = isset($data['date_completed']) ? $data['date_completed'] : null;
        $this->container['date_completed_gmt'] = isset($data['date_completed_gmt']) ? $data['date_completed_gmt'] : null;
        $this->container['cart_hash'] = isset($data['cart_hash']) ? $data['cart_hash'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['tax_lines'] = isset($data['tax_lines']) ? $data['tax_lines'] : null;
        $this->container['shipping_lines'] = isset($data['shipping_lines']) ? $data['shipping_lines'] : null;
        $this->container['fee_lines'] = isset($data['fee_lines']) ? $data['fee_lines'] : null;
        $this->container['coupon_lines'] = isset($data['coupon_lines']) ? $data['coupon_lines'] : null;
        $this->container['refunds'] = isset($data['refunds']) ? $data['refunds'] : null;
        $this->container['set_paid'] = isset($data['set_paid']) ? $data['set_paid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier for the resource.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id Parent order ID.
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Order number.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets order_key
     *
     * @return string
     */
    public function getOrderKey()
    {
        return $this->container['order_key'];
    }

    /**
     * Sets order_key
     *
     * @param string $order_key Order key.
     *
     * @return $this
     */
    public function setOrderKey($order_key)
    {
        $this->container['order_key'] = $order_key;

        return $this;
    }

    /**
     * Gets created_via
     *
     * @return string
     */
    public function getCreatedVia()
    {
        return $this->container['created_via'];
    }

    /**
     * Sets created_via
     *
     * @param string $created_via Shows where the order was created.
     *
     * @return $this
     */
    public function setCreatedVia($created_via)
    {
        $this->container['created_via'] = $created_via;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Version of WooCommerce which last updated the order.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Order status.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency the order was created with, in ISO format.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created The date the order was created, in the site's timezone.
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_created_gmt
     *
     * @return string
     */
    public function getDateCreatedGmt()
    {
        return $this->container['date_created_gmt'];
    }

    /**
     * Sets date_created_gmt
     *
     * @param string $date_created_gmt The date the order was created, as GMT.
     *
     * @return $this
     */
    public function setDateCreatedGmt($date_created_gmt)
    {
        $this->container['date_created_gmt'] = $date_created_gmt;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return string
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param string $date_modified The date the order was last modified, in the site's timezone.
     *
     * @return $this
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets date_modified_gmt
     *
     * @return string
     */
    public function getDateModifiedGmt()
    {
        return $this->container['date_modified_gmt'];
    }

    /**
     * Sets date_modified_gmt
     *
     * @param string $date_modified_gmt The date the order was last modified, as GMT.
     *
     * @return $this
     */
    public function setDateModifiedGmt($date_modified_gmt)
    {
        $this->container['date_modified_gmt'] = $date_modified_gmt;

        return $this;
    }

    /**
     * Gets discount_total
     *
     * @return string
     */
    public function getDiscountTotal()
    {
        return $this->container['discount_total'];
    }

    /**
     * Sets discount_total
     *
     * @param string $discount_total Total discount amount for the order.
     *
     * @return $this
     */
    public function setDiscountTotal($discount_total)
    {
        $this->container['discount_total'] = $discount_total;

        return $this;
    }

    /**
     * Gets discount_tax
     *
     * @return string
     */
    public function getDiscountTax()
    {
        return $this->container['discount_tax'];
    }

    /**
     * Sets discount_tax
     *
     * @param string $discount_tax Total discount tax amount for the order.
     *
     * @return $this
     */
    public function setDiscountTax($discount_tax)
    {
        $this->container['discount_tax'] = $discount_tax;

        return $this;
    }

    /**
     * Gets shipping_total
     *
     * @return string
     */
    public function getShippingTotal()
    {
        return $this->container['shipping_total'];
    }

    /**
     * Sets shipping_total
     *
     * @param string $shipping_total Total shipping amount for the order.
     *
     * @return $this
     */
    public function setShippingTotal($shipping_total)
    {
        $this->container['shipping_total'] = $shipping_total;

        return $this;
    }

    /**
     * Gets shipping_tax
     *
     * @return string
     */
    public function getShippingTax()
    {
        return $this->container['shipping_tax'];
    }

    /**
     * Sets shipping_tax
     *
     * @param string $shipping_tax Total shipping tax amount for the order.
     *
     * @return $this
     */
    public function setShippingTax($shipping_tax)
    {
        $this->container['shipping_tax'] = $shipping_tax;

        return $this;
    }

    /**
     * Gets cart_tax
     *
     * @return string
     */
    public function getCartTax()
    {
        return $this->container['cart_tax'];
    }

    /**
     * Sets cart_tax
     *
     * @param string $cart_tax Sum of line item taxes only.
     *
     * @return $this
     */
    public function setCartTax($cart_tax)
    {
        $this->container['cart_tax'] = $cart_tax;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total Grand total.
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return string
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param string $total_tax Sum of all taxes.
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets prices_include_tax
     *
     * @return bool
     */
    public function getPricesIncludeTax()
    {
        return $this->container['prices_include_tax'];
    }

    /**
     * Sets prices_include_tax
     *
     * @param bool $prices_include_tax True the prices included tax during checkout.
     *
     * @return $this
     */
    public function setPricesIncludeTax($prices_include_tax)
    {
        $this->container['prices_include_tax'] = $prices_include_tax;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id User ID who owns the order. 0 for guests.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_ip_address
     *
     * @return string
     */
    public function getCustomerIpAddress()
    {
        return $this->container['customer_ip_address'];
    }

    /**
     * Sets customer_ip_address
     *
     * @param string $customer_ip_address Customer's IP address.
     *
     * @return $this
     */
    public function setCustomerIpAddress($customer_ip_address)
    {
        $this->container['customer_ip_address'] = $customer_ip_address;

        return $this;
    }

    /**
     * Gets customer_user_agent
     *
     * @return string
     */
    public function getCustomerUserAgent()
    {
        return $this->container['customer_user_agent'];
    }

    /**
     * Sets customer_user_agent
     *
     * @param string $customer_user_agent User agent of the customer.
     *
     * @return $this
     */
    public function setCustomerUserAgent($customer_user_agent)
    {
        $this->container['customer_user_agent'] = $customer_user_agent;

        return $this;
    }

    /**
     * Gets customer_note
     *
     * @return string
     */
    public function getCustomerNote()
    {
        return $this->container['customer_note'];
    }

    /**
     * Sets customer_note
     *
     * @param string $customer_note Note left by customer during checkout.
     *
     * @return $this
     */
    public function setCustomerNote($customer_note)
    {
        $this->container['customer_note'] = $customer_note;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \WooCommerce\Client\Model\OrdersBilling
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \WooCommerce\Client\Model\OrdersBilling $billing billing
     *
     * @return $this
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \WooCommerce\Client\Model\OrdersShipping
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \WooCommerce\Client\Model\OrdersShipping $shipping shipping
     *
     * @return $this
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method Payment method ID.
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_method_title
     *
     * @return string
     */
    public function getPaymentMethodTitle()
    {
        return $this->container['payment_method_title'];
    }

    /**
     * Sets payment_method_title
     *
     * @param string $payment_method_title Payment method title.
     *
     * @return $this
     */
    public function setPaymentMethodTitle($payment_method_title)
    {
        $this->container['payment_method_title'] = $payment_method_title;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Unique transaction ID.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return string
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param string $date_paid The date the order was paid, in the site's timezone.
     *
     * @return $this
     */
    public function setDatePaid($date_paid)
    {
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets date_paid_gmt
     *
     * @return string
     */
    public function getDatePaidGmt()
    {
        return $this->container['date_paid_gmt'];
    }

    /**
     * Sets date_paid_gmt
     *
     * @param string $date_paid_gmt The date the order was paid, as GMT.
     *
     * @return $this
     */
    public function setDatePaidGmt($date_paid_gmt)
    {
        $this->container['date_paid_gmt'] = $date_paid_gmt;

        return $this;
    }

    /**
     * Gets date_completed
     *
     * @return string
     */
    public function getDateCompleted()
    {
        return $this->container['date_completed'];
    }

    /**
     * Sets date_completed
     *
     * @param string $date_completed The date the order was completed, in the site's timezone.
     *
     * @return $this
     */
    public function setDateCompleted($date_completed)
    {
        $this->container['date_completed'] = $date_completed;

        return $this;
    }

    /**
     * Gets date_completed_gmt
     *
     * @return string
     */
    public function getDateCompletedGmt()
    {
        return $this->container['date_completed_gmt'];
    }

    /**
     * Sets date_completed_gmt
     *
     * @param string $date_completed_gmt The date the order was completed, as GMT.
     *
     * @return $this
     */
    public function setDateCompletedGmt($date_completed_gmt)
    {
        $this->container['date_completed_gmt'] = $date_completed_gmt;

        return $this;
    }

    /**
     * Gets cart_hash
     *
     * @return string
     */
    public function getCartHash()
    {
        return $this->container['cart_hash'];
    }

    /**
     * Sets cart_hash
     *
     * @param string $cart_hash MD5 hash of cart items to ensure orders are not modified.
     *
     * @return $this
     */
    public function setCartHash($cart_hash)
    {
        $this->container['cart_hash'] = $cart_hash;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return \WooCommerce\Client\Model\CouponsMetaData[]
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param \WooCommerce\Client\Model\CouponsMetaData[] $meta_data Meta data.
     *
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \WooCommerce\Client\Model\OrdersLineItems[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \WooCommerce\Client\Model\OrdersLineItems[] $line_items Line items data.
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets tax_lines
     *
     * @return \WooCommerce\Client\Model\ShopOrderTaxLines[]
     */
    public function getTaxLines()
    {
        return $this->container['tax_lines'];
    }

    /**
     * Sets tax_lines
     *
     * @param \WooCommerce\Client\Model\ShopOrderTaxLines[] $tax_lines Tax lines data.
     *
     * @return $this
     */
    public function setTaxLines($tax_lines)
    {
        $this->container['tax_lines'] = $tax_lines;

        return $this;
    }

    /**
     * Gets shipping_lines
     *
     * @return \WooCommerce\Client\Model\OrdersShippingLines[]
     */
    public function getShippingLines()
    {
        return $this->container['shipping_lines'];
    }

    /**
     * Sets shipping_lines
     *
     * @param \WooCommerce\Client\Model\OrdersShippingLines[] $shipping_lines Shipping lines data.
     *
     * @return $this
     */
    public function setShippingLines($shipping_lines)
    {
        $this->container['shipping_lines'] = $shipping_lines;

        return $this;
    }

    /**
     * Gets fee_lines
     *
     * @return \WooCommerce\Client\Model\OrdersFeeLines[]
     */
    public function getFeeLines()
    {
        return $this->container['fee_lines'];
    }

    /**
     * Sets fee_lines
     *
     * @param \WooCommerce\Client\Model\OrdersFeeLines[] $fee_lines Fee lines data.
     *
     * @return $this
     */
    public function setFeeLines($fee_lines)
    {
        $this->container['fee_lines'] = $fee_lines;

        return $this;
    }

    /**
     * Gets coupon_lines
     *
     * @return \WooCommerce\Client\Model\OrdersCouponLines[]
     */
    public function getCouponLines()
    {
        return $this->container['coupon_lines'];
    }

    /**
     * Sets coupon_lines
     *
     * @param \WooCommerce\Client\Model\OrdersCouponLines[] $coupon_lines Coupons line data.
     *
     * @return $this
     */
    public function setCouponLines($coupon_lines)
    {
        $this->container['coupon_lines'] = $coupon_lines;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \WooCommerce\Client\Model\ShopOrderRefunds[]
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \WooCommerce\Client\Model\ShopOrderRefunds[] $refunds List of refunds.
     *
     * @return $this
     */
    public function setRefunds($refunds)
    {
        $this->container['refunds'] = $refunds;

        return $this;
    }

    /**
     * Gets set_paid
     *
     * @return bool
     */
    public function getSetPaid()
    {
        return $this->container['set_paid'];
    }

    /**
     * Sets set_paid
     *
     * @param bool $set_paid Define if the order is paid. It will set the status to processing and reduce stock items.
     *
     * @return $this
     */
    public function setSetPaid($set_paid)
    {
        $this->container['set_paid'] = $set_paid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
