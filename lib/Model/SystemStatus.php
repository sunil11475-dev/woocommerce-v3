<?php
/**
 * SystemStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * wc/v3
 *
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WooCommerce\Client\Model;

use \ArrayAccess;
use \WooCommerce\Client\ObjectSerializer;

/**
 * SystemStatus Class Doc Comment
 *
 * @category Class
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SystemStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'system_status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'environment' => '\WooCommerce\Client\Model\SystemStatusEnvironment',
'database' => '\WooCommerce\Client\Model\SystemStatusDatabase',
'active_plugins' => 'string[]',
'inactive_plugins' => 'string[]',
'dropins_mu_plugins' => 'string[]',
'theme' => '\WooCommerce\Client\Model\SystemStatusTheme',
'settings' => '\WooCommerce\Client\Model\SystemStatusSettings',
'security' => '\WooCommerce\Client\Model\SystemStatusSecurity',
'pages' => 'string[]',
'post_type_counts' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'environment' => null,
'database' => null,
'active_plugins' => null,
'inactive_plugins' => null,
'dropins_mu_plugins' => null,
'theme' => null,
'settings' => null,
'security' => null,
'pages' => null,
'post_type_counts' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'environment' => 'environment',
'database' => 'database',
'active_plugins' => 'active_plugins',
'inactive_plugins' => 'inactive_plugins',
'dropins_mu_plugins' => 'dropins_mu_plugins',
'theme' => 'theme',
'settings' => 'settings',
'security' => 'security',
'pages' => 'pages',
'post_type_counts' => 'post_type_counts'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'environment' => 'setEnvironment',
'database' => 'setDatabase',
'active_plugins' => 'setActivePlugins',
'inactive_plugins' => 'setInactivePlugins',
'dropins_mu_plugins' => 'setDropinsMuPlugins',
'theme' => 'setTheme',
'settings' => 'setSettings',
'security' => 'setSecurity',
'pages' => 'setPages',
'post_type_counts' => 'setPostTypeCounts'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'environment' => 'getEnvironment',
'database' => 'getDatabase',
'active_plugins' => 'getActivePlugins',
'inactive_plugins' => 'getInactivePlugins',
'dropins_mu_plugins' => 'getDropinsMuPlugins',
'theme' => 'getTheme',
'settings' => 'getSettings',
'security' => 'getSecurity',
'pages' => 'getPages',
'post_type_counts' => 'getPostTypeCounts'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['environment'] = isset($data['environment']) ? $data['environment'] : null;
        $this->container['database'] = isset($data['database']) ? $data['database'] : null;
        $this->container['active_plugins'] = isset($data['active_plugins']) ? $data['active_plugins'] : null;
        $this->container['inactive_plugins'] = isset($data['inactive_plugins']) ? $data['inactive_plugins'] : null;
        $this->container['dropins_mu_plugins'] = isset($data['dropins_mu_plugins']) ? $data['dropins_mu_plugins'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['security'] = isset($data['security']) ? $data['security'] : null;
        $this->container['pages'] = isset($data['pages']) ? $data['pages'] : null;
        $this->container['post_type_counts'] = isset($data['post_type_counts']) ? $data['post_type_counts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets environment
     *
     * @return \WooCommerce\Client\Model\SystemStatusEnvironment
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param \WooCommerce\Client\Model\SystemStatusEnvironment $environment environment
     *
     * @return $this
     */
    public function setEnvironment($environment)
    {
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets database
     *
     * @return \WooCommerce\Client\Model\SystemStatusDatabase
     */
    public function getDatabase()
    {
        return $this->container['database'];
    }

    /**
     * Sets database
     *
     * @param \WooCommerce\Client\Model\SystemStatusDatabase $database database
     *
     * @return $this
     */
    public function setDatabase($database)
    {
        $this->container['database'] = $database;

        return $this;
    }

    /**
     * Gets active_plugins
     *
     * @return string[]
     */
    public function getActivePlugins()
    {
        return $this->container['active_plugins'];
    }

    /**
     * Sets active_plugins
     *
     * @param string[] $active_plugins Active plugins.
     *
     * @return $this
     */
    public function setActivePlugins($active_plugins)
    {
        $this->container['active_plugins'] = $active_plugins;

        return $this;
    }

    /**
     * Gets inactive_plugins
     *
     * @return string[]
     */
    public function getInactivePlugins()
    {
        return $this->container['inactive_plugins'];
    }

    /**
     * Sets inactive_plugins
     *
     * @param string[] $inactive_plugins Inactive plugins.
     *
     * @return $this
     */
    public function setInactivePlugins($inactive_plugins)
    {
        $this->container['inactive_plugins'] = $inactive_plugins;

        return $this;
    }

    /**
     * Gets dropins_mu_plugins
     *
     * @return string[]
     */
    public function getDropinsMuPlugins()
    {
        return $this->container['dropins_mu_plugins'];
    }

    /**
     * Sets dropins_mu_plugins
     *
     * @param string[] $dropins_mu_plugins Dropins & MU plugins.
     *
     * @return $this
     */
    public function setDropinsMuPlugins($dropins_mu_plugins)
    {
        $this->container['dropins_mu_plugins'] = $dropins_mu_plugins;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return \WooCommerce\Client\Model\SystemStatusTheme
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param \WooCommerce\Client\Model\SystemStatusTheme $theme theme
     *
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \WooCommerce\Client\Model\SystemStatusSettings
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \WooCommerce\Client\Model\SystemStatusSettings $settings settings
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets security
     *
     * @return \WooCommerce\Client\Model\SystemStatusSecurity
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param \WooCommerce\Client\Model\SystemStatusSecurity $security security
     *
     * @return $this
     */
    public function setSecurity($security)
    {
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return string[]
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param string[] $pages WooCommerce pages.
     *
     * @return $this
     */
    public function setPages($pages)
    {
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets post_type_counts
     *
     * @return string[]
     */
    public function getPostTypeCounts()
    {
        return $this->container['post_type_counts'];
    }

    /**
     * Sets post_type_counts
     *
     * @param string[] $post_type_counts Total post count.
     *
     * @return $this
     */
    public function setPostTypeCounts($post_type_counts)
    {
        $this->container['post_type_counts'] = $post_type_counts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
