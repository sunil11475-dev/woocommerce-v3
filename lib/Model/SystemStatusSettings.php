<?php
/**
 * SystemStatusSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * wc/v3
 *
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WooCommerce\Client\Model;

use \ArrayAccess;
use \WooCommerce\Client\ObjectSerializer;

/**
 * SystemStatusSettings Class Doc Comment
 *
 * @category Class
 * @description Settings.
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SystemStatusSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'system_status_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'api_enabled' => 'bool',
'force_ssl' => 'bool',
'currency' => 'string',
'currency_symbol' => 'string',
'currency_position' => 'string',
'thousand_separator' => 'string',
'decimal_separator' => 'string',
'number_of_decimals' => 'int',
'geolocation_enabled' => 'bool',
'taxonomies' => 'string[]',
'product_visibility_terms' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'api_enabled' => null,
'force_ssl' => null,
'currency' => null,
'currency_symbol' => null,
'currency_position' => null,
'thousand_separator' => null,
'decimal_separator' => null,
'number_of_decimals' => null,
'geolocation_enabled' => null,
'taxonomies' => null,
'product_visibility_terms' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_enabled' => 'api_enabled',
'force_ssl' => 'force_ssl',
'currency' => 'currency',
'currency_symbol' => 'currency_symbol',
'currency_position' => 'currency_position',
'thousand_separator' => 'thousand_separator',
'decimal_separator' => 'decimal_separator',
'number_of_decimals' => 'number_of_decimals',
'geolocation_enabled' => 'geolocation_enabled',
'taxonomies' => 'taxonomies',
'product_visibility_terms' => 'product_visibility_terms'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_enabled' => 'setApiEnabled',
'force_ssl' => 'setForceSsl',
'currency' => 'setCurrency',
'currency_symbol' => 'setCurrencySymbol',
'currency_position' => 'setCurrencyPosition',
'thousand_separator' => 'setThousandSeparator',
'decimal_separator' => 'setDecimalSeparator',
'number_of_decimals' => 'setNumberOfDecimals',
'geolocation_enabled' => 'setGeolocationEnabled',
'taxonomies' => 'setTaxonomies',
'product_visibility_terms' => 'setProductVisibilityTerms'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_enabled' => 'getApiEnabled',
'force_ssl' => 'getForceSsl',
'currency' => 'getCurrency',
'currency_symbol' => 'getCurrencySymbol',
'currency_position' => 'getCurrencyPosition',
'thousand_separator' => 'getThousandSeparator',
'decimal_separator' => 'getDecimalSeparator',
'number_of_decimals' => 'getNumberOfDecimals',
'geolocation_enabled' => 'getGeolocationEnabled',
'taxonomies' => 'getTaxonomies',
'product_visibility_terms' => 'getProductVisibilityTerms'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_enabled'] = isset($data['api_enabled']) ? $data['api_enabled'] : null;
        $this->container['force_ssl'] = isset($data['force_ssl']) ? $data['force_ssl'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['currency_symbol'] = isset($data['currency_symbol']) ? $data['currency_symbol'] : null;
        $this->container['currency_position'] = isset($data['currency_position']) ? $data['currency_position'] : null;
        $this->container['thousand_separator'] = isset($data['thousand_separator']) ? $data['thousand_separator'] : null;
        $this->container['decimal_separator'] = isset($data['decimal_separator']) ? $data['decimal_separator'] : null;
        $this->container['number_of_decimals'] = isset($data['number_of_decimals']) ? $data['number_of_decimals'] : null;
        $this->container['geolocation_enabled'] = isset($data['geolocation_enabled']) ? $data['geolocation_enabled'] : null;
        $this->container['taxonomies'] = isset($data['taxonomies']) ? $data['taxonomies'] : null;
        $this->container['product_visibility_terms'] = isset($data['product_visibility_terms']) ? $data['product_visibility_terms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_enabled
     *
     * @return bool
     */
    public function getApiEnabled()
    {
        return $this->container['api_enabled'];
    }

    /**
     * Sets api_enabled
     *
     * @param bool $api_enabled REST API enabled?
     *
     * @return $this
     */
    public function setApiEnabled($api_enabled)
    {
        $this->container['api_enabled'] = $api_enabled;

        return $this;
    }

    /**
     * Gets force_ssl
     *
     * @return bool
     */
    public function getForceSsl()
    {
        return $this->container['force_ssl'];
    }

    /**
     * Sets force_ssl
     *
     * @param bool $force_ssl SSL forced?
     *
     * @return $this
     */
    public function setForceSsl($force_ssl)
    {
        $this->container['force_ssl'] = $force_ssl;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets currency_symbol
     *
     * @return string
     */
    public function getCurrencySymbol()
    {
        return $this->container['currency_symbol'];
    }

    /**
     * Sets currency_symbol
     *
     * @param string $currency_symbol Currency symbol.
     *
     * @return $this
     */
    public function setCurrencySymbol($currency_symbol)
    {
        $this->container['currency_symbol'] = $currency_symbol;

        return $this;
    }

    /**
     * Gets currency_position
     *
     * @return string
     */
    public function getCurrencyPosition()
    {
        return $this->container['currency_position'];
    }

    /**
     * Sets currency_position
     *
     * @param string $currency_position Currency position.
     *
     * @return $this
     */
    public function setCurrencyPosition($currency_position)
    {
        $this->container['currency_position'] = $currency_position;

        return $this;
    }

    /**
     * Gets thousand_separator
     *
     * @return string
     */
    public function getThousandSeparator()
    {
        return $this->container['thousand_separator'];
    }

    /**
     * Sets thousand_separator
     *
     * @param string $thousand_separator Thousand separator.
     *
     * @return $this
     */
    public function setThousandSeparator($thousand_separator)
    {
        $this->container['thousand_separator'] = $thousand_separator;

        return $this;
    }

    /**
     * Gets decimal_separator
     *
     * @return string
     */
    public function getDecimalSeparator()
    {
        return $this->container['decimal_separator'];
    }

    /**
     * Sets decimal_separator
     *
     * @param string $decimal_separator Decimal separator.
     *
     * @return $this
     */
    public function setDecimalSeparator($decimal_separator)
    {
        $this->container['decimal_separator'] = $decimal_separator;

        return $this;
    }

    /**
     * Gets number_of_decimals
     *
     * @return int
     */
    public function getNumberOfDecimals()
    {
        return $this->container['number_of_decimals'];
    }

    /**
     * Sets number_of_decimals
     *
     * @param int $number_of_decimals Number of decimals.
     *
     * @return $this
     */
    public function setNumberOfDecimals($number_of_decimals)
    {
        $this->container['number_of_decimals'] = $number_of_decimals;

        return $this;
    }

    /**
     * Gets geolocation_enabled
     *
     * @return bool
     */
    public function getGeolocationEnabled()
    {
        return $this->container['geolocation_enabled'];
    }

    /**
     * Sets geolocation_enabled
     *
     * @param bool $geolocation_enabled Geolocation enabled?
     *
     * @return $this
     */
    public function setGeolocationEnabled($geolocation_enabled)
    {
        $this->container['geolocation_enabled'] = $geolocation_enabled;

        return $this;
    }

    /**
     * Gets taxonomies
     *
     * @return string[]
     */
    public function getTaxonomies()
    {
        return $this->container['taxonomies'];
    }

    /**
     * Sets taxonomies
     *
     * @param string[] $taxonomies Taxonomy terms for product/order statuses.
     *
     * @return $this
     */
    public function setTaxonomies($taxonomies)
    {
        $this->container['taxonomies'] = $taxonomies;

        return $this;
    }

    /**
     * Gets product_visibility_terms
     *
     * @return string[]
     */
    public function getProductVisibilityTerms()
    {
        return $this->container['product_visibility_terms'];
    }

    /**
     * Sets product_visibility_terms
     *
     * @param string[] $product_visibility_terms Terms in the product visibility taxonomy.
     *
     * @return $this
     */
    public function setProductVisibilityTerms($product_visibility_terms)
    {
        $this->container['product_visibility_terms'] = $product_visibility_terms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
