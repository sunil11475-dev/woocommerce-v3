<?php
/**
 * SystemStatusEnvironment
 *
 * PHP version 5
 *
 * @category Class
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * wc/v3
 *
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WooCommerce\Client\Model;

use \ArrayAccess;
use \WooCommerce\Client\ObjectSerializer;

/**
 * SystemStatusEnvironment Class Doc Comment
 *
 * @category Class
 * @description Environment.
 * @package  WooCommerce\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SystemStatusEnvironment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'system_status_environment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'home_url' => 'string',
'site_url' => 'string',
'version' => 'string',
'log_directory' => 'string',
'log_directory_writable' => 'bool',
'wp_version' => 'string',
'wp_multisite' => 'bool',
'wp_memory_limit' => 'int',
'wp_debug_mode' => 'bool',
'wp_cron' => 'bool',
'language' => 'string',
'server_info' => 'string',
'php_version' => 'string',
'php_post_max_size' => 'int',
'php_max_execution_time' => 'int',
'php_max_input_vars' => 'int',
'curl_version' => 'string',
'suhosin_installed' => 'bool',
'max_upload_size' => 'int',
'mysql_version' => 'string',
'mysql_version_string' => 'string',
'default_timezone' => 'string',
'fsockopen_or_curl_enabled' => 'bool',
'soapclient_enabled' => 'bool',
'domdocument_enabled' => 'bool',
'gzip_enabled' => 'bool',
'mbstring_enabled' => 'bool',
'remote_post_successful' => 'bool',
'remote_post_response' => 'string',
'remote_get_successful' => 'bool',
'remote_get_response' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'home_url' => 'uri',
'site_url' => 'uri',
'version' => null,
'log_directory' => null,
'log_directory_writable' => null,
'wp_version' => null,
'wp_multisite' => null,
'wp_memory_limit' => null,
'wp_debug_mode' => null,
'wp_cron' => null,
'language' => null,
'server_info' => null,
'php_version' => null,
'php_post_max_size' => null,
'php_max_execution_time' => null,
'php_max_input_vars' => null,
'curl_version' => null,
'suhosin_installed' => null,
'max_upload_size' => null,
'mysql_version' => null,
'mysql_version_string' => null,
'default_timezone' => null,
'fsockopen_or_curl_enabled' => null,
'soapclient_enabled' => null,
'domdocument_enabled' => null,
'gzip_enabled' => null,
'mbstring_enabled' => null,
'remote_post_successful' => null,
'remote_post_response' => null,
'remote_get_successful' => null,
'remote_get_response' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'home_url' => 'home_url',
'site_url' => 'site_url',
'version' => 'version',
'log_directory' => 'log_directory',
'log_directory_writable' => 'log_directory_writable',
'wp_version' => 'wp_version',
'wp_multisite' => 'wp_multisite',
'wp_memory_limit' => 'wp_memory_limit',
'wp_debug_mode' => 'wp_debug_mode',
'wp_cron' => 'wp_cron',
'language' => 'language',
'server_info' => 'server_info',
'php_version' => 'php_version',
'php_post_max_size' => 'php_post_max_size',
'php_max_execution_time' => 'php_max_execution_time',
'php_max_input_vars' => 'php_max_input_vars',
'curl_version' => 'curl_version',
'suhosin_installed' => 'suhosin_installed',
'max_upload_size' => 'max_upload_size',
'mysql_version' => 'mysql_version',
'mysql_version_string' => 'mysql_version_string',
'default_timezone' => 'default_timezone',
'fsockopen_or_curl_enabled' => 'fsockopen_or_curl_enabled',
'soapclient_enabled' => 'soapclient_enabled',
'domdocument_enabled' => 'domdocument_enabled',
'gzip_enabled' => 'gzip_enabled',
'mbstring_enabled' => 'mbstring_enabled',
'remote_post_successful' => 'remote_post_successful',
'remote_post_response' => 'remote_post_response',
'remote_get_successful' => 'remote_get_successful',
'remote_get_response' => 'remote_get_response'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'home_url' => 'setHomeUrl',
'site_url' => 'setSiteUrl',
'version' => 'setVersion',
'log_directory' => 'setLogDirectory',
'log_directory_writable' => 'setLogDirectoryWritable',
'wp_version' => 'setWpVersion',
'wp_multisite' => 'setWpMultisite',
'wp_memory_limit' => 'setWpMemoryLimit',
'wp_debug_mode' => 'setWpDebugMode',
'wp_cron' => 'setWpCron',
'language' => 'setLanguage',
'server_info' => 'setServerInfo',
'php_version' => 'setPhpVersion',
'php_post_max_size' => 'setPhpPostMaxSize',
'php_max_execution_time' => 'setPhpMaxExecutionTime',
'php_max_input_vars' => 'setPhpMaxInputVars',
'curl_version' => 'setCurlVersion',
'suhosin_installed' => 'setSuhosinInstalled',
'max_upload_size' => 'setMaxUploadSize',
'mysql_version' => 'setMysqlVersion',
'mysql_version_string' => 'setMysqlVersionString',
'default_timezone' => 'setDefaultTimezone',
'fsockopen_or_curl_enabled' => 'setFsockopenOrCurlEnabled',
'soapclient_enabled' => 'setSoapclientEnabled',
'domdocument_enabled' => 'setDomdocumentEnabled',
'gzip_enabled' => 'setGzipEnabled',
'mbstring_enabled' => 'setMbstringEnabled',
'remote_post_successful' => 'setRemotePostSuccessful',
'remote_post_response' => 'setRemotePostResponse',
'remote_get_successful' => 'setRemoteGetSuccessful',
'remote_get_response' => 'setRemoteGetResponse'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'home_url' => 'getHomeUrl',
'site_url' => 'getSiteUrl',
'version' => 'getVersion',
'log_directory' => 'getLogDirectory',
'log_directory_writable' => 'getLogDirectoryWritable',
'wp_version' => 'getWpVersion',
'wp_multisite' => 'getWpMultisite',
'wp_memory_limit' => 'getWpMemoryLimit',
'wp_debug_mode' => 'getWpDebugMode',
'wp_cron' => 'getWpCron',
'language' => 'getLanguage',
'server_info' => 'getServerInfo',
'php_version' => 'getPhpVersion',
'php_post_max_size' => 'getPhpPostMaxSize',
'php_max_execution_time' => 'getPhpMaxExecutionTime',
'php_max_input_vars' => 'getPhpMaxInputVars',
'curl_version' => 'getCurlVersion',
'suhosin_installed' => 'getSuhosinInstalled',
'max_upload_size' => 'getMaxUploadSize',
'mysql_version' => 'getMysqlVersion',
'mysql_version_string' => 'getMysqlVersionString',
'default_timezone' => 'getDefaultTimezone',
'fsockopen_or_curl_enabled' => 'getFsockopenOrCurlEnabled',
'soapclient_enabled' => 'getSoapclientEnabled',
'domdocument_enabled' => 'getDomdocumentEnabled',
'gzip_enabled' => 'getGzipEnabled',
'mbstring_enabled' => 'getMbstringEnabled',
'remote_post_successful' => 'getRemotePostSuccessful',
'remote_post_response' => 'getRemotePostResponse',
'remote_get_successful' => 'getRemoteGetSuccessful',
'remote_get_response' => 'getRemoteGetResponse'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['home_url'] = isset($data['home_url']) ? $data['home_url'] : null;
        $this->container['site_url'] = isset($data['site_url']) ? $data['site_url'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['log_directory'] = isset($data['log_directory']) ? $data['log_directory'] : null;
        $this->container['log_directory_writable'] = isset($data['log_directory_writable']) ? $data['log_directory_writable'] : null;
        $this->container['wp_version'] = isset($data['wp_version']) ? $data['wp_version'] : null;
        $this->container['wp_multisite'] = isset($data['wp_multisite']) ? $data['wp_multisite'] : null;
        $this->container['wp_memory_limit'] = isset($data['wp_memory_limit']) ? $data['wp_memory_limit'] : null;
        $this->container['wp_debug_mode'] = isset($data['wp_debug_mode']) ? $data['wp_debug_mode'] : null;
        $this->container['wp_cron'] = isset($data['wp_cron']) ? $data['wp_cron'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['server_info'] = isset($data['server_info']) ? $data['server_info'] : null;
        $this->container['php_version'] = isset($data['php_version']) ? $data['php_version'] : null;
        $this->container['php_post_max_size'] = isset($data['php_post_max_size']) ? $data['php_post_max_size'] : null;
        $this->container['php_max_execution_time'] = isset($data['php_max_execution_time']) ? $data['php_max_execution_time'] : null;
        $this->container['php_max_input_vars'] = isset($data['php_max_input_vars']) ? $data['php_max_input_vars'] : null;
        $this->container['curl_version'] = isset($data['curl_version']) ? $data['curl_version'] : null;
        $this->container['suhosin_installed'] = isset($data['suhosin_installed']) ? $data['suhosin_installed'] : null;
        $this->container['max_upload_size'] = isset($data['max_upload_size']) ? $data['max_upload_size'] : null;
        $this->container['mysql_version'] = isset($data['mysql_version']) ? $data['mysql_version'] : null;
        $this->container['mysql_version_string'] = isset($data['mysql_version_string']) ? $data['mysql_version_string'] : null;
        $this->container['default_timezone'] = isset($data['default_timezone']) ? $data['default_timezone'] : null;
        $this->container['fsockopen_or_curl_enabled'] = isset($data['fsockopen_or_curl_enabled']) ? $data['fsockopen_or_curl_enabled'] : null;
        $this->container['soapclient_enabled'] = isset($data['soapclient_enabled']) ? $data['soapclient_enabled'] : null;
        $this->container['domdocument_enabled'] = isset($data['domdocument_enabled']) ? $data['domdocument_enabled'] : null;
        $this->container['gzip_enabled'] = isset($data['gzip_enabled']) ? $data['gzip_enabled'] : null;
        $this->container['mbstring_enabled'] = isset($data['mbstring_enabled']) ? $data['mbstring_enabled'] : null;
        $this->container['remote_post_successful'] = isset($data['remote_post_successful']) ? $data['remote_post_successful'] : null;
        $this->container['remote_post_response'] = isset($data['remote_post_response']) ? $data['remote_post_response'] : null;
        $this->container['remote_get_successful'] = isset($data['remote_get_successful']) ? $data['remote_get_successful'] : null;
        $this->container['remote_get_response'] = isset($data['remote_get_response']) ? $data['remote_get_response'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets home_url
     *
     * @return string
     */
    public function getHomeUrl()
    {
        return $this->container['home_url'];
    }

    /**
     * Sets home_url
     *
     * @param string $home_url Home URL.
     *
     * @return $this
     */
    public function setHomeUrl($home_url)
    {
        $this->container['home_url'] = $home_url;

        return $this;
    }

    /**
     * Gets site_url
     *
     * @return string
     */
    public function getSiteUrl()
    {
        return $this->container['site_url'];
    }

    /**
     * Sets site_url
     *
     * @param string $site_url Site URL.
     *
     * @return $this
     */
    public function setSiteUrl($site_url)
    {
        $this->container['site_url'] = $site_url;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version WooCommerce version.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets log_directory
     *
     * @return string
     */
    public function getLogDirectory()
    {
        return $this->container['log_directory'];
    }

    /**
     * Sets log_directory
     *
     * @param string $log_directory Log directory.
     *
     * @return $this
     */
    public function setLogDirectory($log_directory)
    {
        $this->container['log_directory'] = $log_directory;

        return $this;
    }

    /**
     * Gets log_directory_writable
     *
     * @return bool
     */
    public function getLogDirectoryWritable()
    {
        return $this->container['log_directory_writable'];
    }

    /**
     * Sets log_directory_writable
     *
     * @param bool $log_directory_writable Is log directory writable?
     *
     * @return $this
     */
    public function setLogDirectoryWritable($log_directory_writable)
    {
        $this->container['log_directory_writable'] = $log_directory_writable;

        return $this;
    }

    /**
     * Gets wp_version
     *
     * @return string
     */
    public function getWpVersion()
    {
        return $this->container['wp_version'];
    }

    /**
     * Sets wp_version
     *
     * @param string $wp_version WordPress version.
     *
     * @return $this
     */
    public function setWpVersion($wp_version)
    {
        $this->container['wp_version'] = $wp_version;

        return $this;
    }

    /**
     * Gets wp_multisite
     *
     * @return bool
     */
    public function getWpMultisite()
    {
        return $this->container['wp_multisite'];
    }

    /**
     * Sets wp_multisite
     *
     * @param bool $wp_multisite Is WordPress multisite?
     *
     * @return $this
     */
    public function setWpMultisite($wp_multisite)
    {
        $this->container['wp_multisite'] = $wp_multisite;

        return $this;
    }

    /**
     * Gets wp_memory_limit
     *
     * @return int
     */
    public function getWpMemoryLimit()
    {
        return $this->container['wp_memory_limit'];
    }

    /**
     * Sets wp_memory_limit
     *
     * @param int $wp_memory_limit WordPress memory limit.
     *
     * @return $this
     */
    public function setWpMemoryLimit($wp_memory_limit)
    {
        $this->container['wp_memory_limit'] = $wp_memory_limit;

        return $this;
    }

    /**
     * Gets wp_debug_mode
     *
     * @return bool
     */
    public function getWpDebugMode()
    {
        return $this->container['wp_debug_mode'];
    }

    /**
     * Sets wp_debug_mode
     *
     * @param bool $wp_debug_mode Is WordPress debug mode active?
     *
     * @return $this
     */
    public function setWpDebugMode($wp_debug_mode)
    {
        $this->container['wp_debug_mode'] = $wp_debug_mode;

        return $this;
    }

    /**
     * Gets wp_cron
     *
     * @return bool
     */
    public function getWpCron()
    {
        return $this->container['wp_cron'];
    }

    /**
     * Sets wp_cron
     *
     * @param bool $wp_cron Are WordPress cron jobs enabled?
     *
     * @return $this
     */
    public function setWpCron($wp_cron)
    {
        $this->container['wp_cron'] = $wp_cron;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language WordPress language.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets server_info
     *
     * @return string
     */
    public function getServerInfo()
    {
        return $this->container['server_info'];
    }

    /**
     * Sets server_info
     *
     * @param string $server_info Server info.
     *
     * @return $this
     */
    public function setServerInfo($server_info)
    {
        $this->container['server_info'] = $server_info;

        return $this;
    }

    /**
     * Gets php_version
     *
     * @return string
     */
    public function getPhpVersion()
    {
        return $this->container['php_version'];
    }

    /**
     * Sets php_version
     *
     * @param string $php_version PHP version.
     *
     * @return $this
     */
    public function setPhpVersion($php_version)
    {
        $this->container['php_version'] = $php_version;

        return $this;
    }

    /**
     * Gets php_post_max_size
     *
     * @return int
     */
    public function getPhpPostMaxSize()
    {
        return $this->container['php_post_max_size'];
    }

    /**
     * Sets php_post_max_size
     *
     * @param int $php_post_max_size PHP post max size.
     *
     * @return $this
     */
    public function setPhpPostMaxSize($php_post_max_size)
    {
        $this->container['php_post_max_size'] = $php_post_max_size;

        return $this;
    }

    /**
     * Gets php_max_execution_time
     *
     * @return int
     */
    public function getPhpMaxExecutionTime()
    {
        return $this->container['php_max_execution_time'];
    }

    /**
     * Sets php_max_execution_time
     *
     * @param int $php_max_execution_time PHP max execution time.
     *
     * @return $this
     */
    public function setPhpMaxExecutionTime($php_max_execution_time)
    {
        $this->container['php_max_execution_time'] = $php_max_execution_time;

        return $this;
    }

    /**
     * Gets php_max_input_vars
     *
     * @return int
     */
    public function getPhpMaxInputVars()
    {
        return $this->container['php_max_input_vars'];
    }

    /**
     * Sets php_max_input_vars
     *
     * @param int $php_max_input_vars PHP max input vars.
     *
     * @return $this
     */
    public function setPhpMaxInputVars($php_max_input_vars)
    {
        $this->container['php_max_input_vars'] = $php_max_input_vars;

        return $this;
    }

    /**
     * Gets curl_version
     *
     * @return string
     */
    public function getCurlVersion()
    {
        return $this->container['curl_version'];
    }

    /**
     * Sets curl_version
     *
     * @param string $curl_version cURL version.
     *
     * @return $this
     */
    public function setCurlVersion($curl_version)
    {
        $this->container['curl_version'] = $curl_version;

        return $this;
    }

    /**
     * Gets suhosin_installed
     *
     * @return bool
     */
    public function getSuhosinInstalled()
    {
        return $this->container['suhosin_installed'];
    }

    /**
     * Sets suhosin_installed
     *
     * @param bool $suhosin_installed Is SUHOSIN installed?
     *
     * @return $this
     */
    public function setSuhosinInstalled($suhosin_installed)
    {
        $this->container['suhosin_installed'] = $suhosin_installed;

        return $this;
    }

    /**
     * Gets max_upload_size
     *
     * @return int
     */
    public function getMaxUploadSize()
    {
        return $this->container['max_upload_size'];
    }

    /**
     * Sets max_upload_size
     *
     * @param int $max_upload_size Max upload size.
     *
     * @return $this
     */
    public function setMaxUploadSize($max_upload_size)
    {
        $this->container['max_upload_size'] = $max_upload_size;

        return $this;
    }

    /**
     * Gets mysql_version
     *
     * @return string
     */
    public function getMysqlVersion()
    {
        return $this->container['mysql_version'];
    }

    /**
     * Sets mysql_version
     *
     * @param string $mysql_version MySQL version.
     *
     * @return $this
     */
    public function setMysqlVersion($mysql_version)
    {
        $this->container['mysql_version'] = $mysql_version;

        return $this;
    }

    /**
     * Gets mysql_version_string
     *
     * @return string
     */
    public function getMysqlVersionString()
    {
        return $this->container['mysql_version_string'];
    }

    /**
     * Sets mysql_version_string
     *
     * @param string $mysql_version_string MySQL version string.
     *
     * @return $this
     */
    public function setMysqlVersionString($mysql_version_string)
    {
        $this->container['mysql_version_string'] = $mysql_version_string;

        return $this;
    }

    /**
     * Gets default_timezone
     *
     * @return string
     */
    public function getDefaultTimezone()
    {
        return $this->container['default_timezone'];
    }

    /**
     * Sets default_timezone
     *
     * @param string $default_timezone Default timezone.
     *
     * @return $this
     */
    public function setDefaultTimezone($default_timezone)
    {
        $this->container['default_timezone'] = $default_timezone;

        return $this;
    }

    /**
     * Gets fsockopen_or_curl_enabled
     *
     * @return bool
     */
    public function getFsockopenOrCurlEnabled()
    {
        return $this->container['fsockopen_or_curl_enabled'];
    }

    /**
     * Sets fsockopen_or_curl_enabled
     *
     * @param bool $fsockopen_or_curl_enabled Is fsockopen/cURL enabled?
     *
     * @return $this
     */
    public function setFsockopenOrCurlEnabled($fsockopen_or_curl_enabled)
    {
        $this->container['fsockopen_or_curl_enabled'] = $fsockopen_or_curl_enabled;

        return $this;
    }

    /**
     * Gets soapclient_enabled
     *
     * @return bool
     */
    public function getSoapclientEnabled()
    {
        return $this->container['soapclient_enabled'];
    }

    /**
     * Sets soapclient_enabled
     *
     * @param bool $soapclient_enabled Is SoapClient class enabled?
     *
     * @return $this
     */
    public function setSoapclientEnabled($soapclient_enabled)
    {
        $this->container['soapclient_enabled'] = $soapclient_enabled;

        return $this;
    }

    /**
     * Gets domdocument_enabled
     *
     * @return bool
     */
    public function getDomdocumentEnabled()
    {
        return $this->container['domdocument_enabled'];
    }

    /**
     * Sets domdocument_enabled
     *
     * @param bool $domdocument_enabled Is DomDocument class enabled?
     *
     * @return $this
     */
    public function setDomdocumentEnabled($domdocument_enabled)
    {
        $this->container['domdocument_enabled'] = $domdocument_enabled;

        return $this;
    }

    /**
     * Gets gzip_enabled
     *
     * @return bool
     */
    public function getGzipEnabled()
    {
        return $this->container['gzip_enabled'];
    }

    /**
     * Sets gzip_enabled
     *
     * @param bool $gzip_enabled Is GZip enabled?
     *
     * @return $this
     */
    public function setGzipEnabled($gzip_enabled)
    {
        $this->container['gzip_enabled'] = $gzip_enabled;

        return $this;
    }

    /**
     * Gets mbstring_enabled
     *
     * @return bool
     */
    public function getMbstringEnabled()
    {
        return $this->container['mbstring_enabled'];
    }

    /**
     * Sets mbstring_enabled
     *
     * @param bool $mbstring_enabled Is mbstring enabled?
     *
     * @return $this
     */
    public function setMbstringEnabled($mbstring_enabled)
    {
        $this->container['mbstring_enabled'] = $mbstring_enabled;

        return $this;
    }

    /**
     * Gets remote_post_successful
     *
     * @return bool
     */
    public function getRemotePostSuccessful()
    {
        return $this->container['remote_post_successful'];
    }

    /**
     * Sets remote_post_successful
     *
     * @param bool $remote_post_successful Remote POST successful?
     *
     * @return $this
     */
    public function setRemotePostSuccessful($remote_post_successful)
    {
        $this->container['remote_post_successful'] = $remote_post_successful;

        return $this;
    }

    /**
     * Gets remote_post_response
     *
     * @return string
     */
    public function getRemotePostResponse()
    {
        return $this->container['remote_post_response'];
    }

    /**
     * Sets remote_post_response
     *
     * @param string $remote_post_response Remote POST response.
     *
     * @return $this
     */
    public function setRemotePostResponse($remote_post_response)
    {
        $this->container['remote_post_response'] = $remote_post_response;

        return $this;
    }

    /**
     * Gets remote_get_successful
     *
     * @return bool
     */
    public function getRemoteGetSuccessful()
    {
        return $this->container['remote_get_successful'];
    }

    /**
     * Sets remote_get_successful
     *
     * @param bool $remote_get_successful Remote GET successful?
     *
     * @return $this
     */
    public function setRemoteGetSuccessful($remote_get_successful)
    {
        $this->container['remote_get_successful'] = $remote_get_successful;

        return $this;
    }

    /**
     * Gets remote_get_response
     *
     * @return string
     */
    public function getRemoteGetResponse()
    {
        return $this->container['remote_get_response'];
    }

    /**
     * Sets remote_get_response
     *
     * @param string $remote_get_response Remote GET response.
     *
     * @return $this
     */
    public function setRemoteGetResponse($remote_get_response)
    {
        $this->container['remote_get_response'] = $remote_get_response;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
